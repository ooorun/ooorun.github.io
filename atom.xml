<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>O’s World</title>
  
  <subtitle>Mr. O 的分享小站，分享有趣的事情</subtitle>
  <link href="http://ooo.run/atom.xml" rel="self"/>
  
  <link href="http://ooo.run/"/>
  <updated>2024-12-14T22:00:37.586Z</updated>
  <id>http://ooo.run/</id>
  
  <author>
    <name>Mr. O</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx Proxy Manager 使用教程</title>
    <link href="http://ooo.run/post/use-nginx-proxy-manager.html"/>
    <id>http://ooo.run/post/use-nginx-proxy-manager.html</id>
    <published>2024-12-14T17:16:18.000Z</published>
    <updated>2024-12-14T22:00:37.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于现在网站来说， HTTPS 证书已经必不可少，虽然我们已经可以使用 Let’s Encrypt 获取免费证书，并且可以使用 acme.sh 快速申请、自动续期，但是每次添加新域名时仍然需要编辑 Nginx 配置文件，略有麻烦。  </p><p>本文将介绍使用 <strong>Nginx Proxy Manager</strong> 设置 Nginx 反向代理，同时支持自动申请、续期 HTTPS 证书，即便在局域网内也可以使用 API 申请证书！  </p><p>Nginx Proxy Manager 完全是图形界面，不懂代码也没有关系，非常适合个人使用！   </p><p>主要特点：</p><ul><li>漂亮的用户界面</li><li>轻松的反向代理设置</li><li>轻松配置HTTPS，内置对 Let’s Encrypt 的支持</li><li>提供 Docker 镜像 ，轻松部署</li><li>支持多用户，提供简单的访问权限设置</li></ul><h2 id="与-Nginx-对比"><a href="#与-Nginx-对比" class="headerlink" title="与 Nginx 对比"></a>与 Nginx 对比</h2><table><thead><tr><th align="center">特性</th><th align="center">Nginx Proxy Manager</th><th align="center">Nginx（手动配置）</th></tr></thead><tbody><tr><td align="center"><strong>配置方式</strong></td><td align="center">Web 界面管理，操作简单</td><td align="center">手动编辑配置文件，灵活度高</td></tr><tr><td align="center"><strong>功能性</strong></td><td align="center">基础反向代理与 SSL 管理</td><td align="center">支持高级功能与复杂场景</td></tr><tr><td align="center"><strong>安全性</strong></td><td align="center">更新频率较低，依赖第三方维护</td><td align="center">官方定期更新，更安全可靠</td></tr><tr><td align="center"><strong>错误容忍</strong></td><td align="center">错误配置可能影响整体服务</td><td align="center">站点配置独立，互不影响</td></tr><tr><td align="center"><strong>性能</strong></td><td align="center">对高并发请求性能有限，适合轻量应用</td><td align="center">原生性能，支持高并发场景</td></tr><tr><td align="center"><strong>适用场景</strong></td><td align="center">适合小型项目、无技术背景的用户</td><td align="center">适合大型项目与高级用户</td></tr></tbody></table><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>Nginx Proxy Manager 使用 <mark class="hl-label blue">Docker</mark> 部署，因此你的服务器上需要安装 Docker 与 Docker Compose 。</p><p>如果你还未安装，可以查看：<a href="https://ooo.run/post/debian-install-docker.html" target="_blank">在 Debian 中安装 Docker 以及 Docker Compose</a></p><h2 id="使用-Docker-安装"><a href="#使用-Docker-安装" class="headerlink" title="使用 Docker 安装"></a>使用 Docker 安装</h2><p>创建一个工作目录，然后在其中创建 <code>docker-compose.yml</code> 文件，填入下面的内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure><ul><li>80 是网站的 80 端口</li><li>81 是 Nginx Proxy Manager 的管理端口</li><li>443 是网站的 443 端口</li></ul><p>Nginx Proxy Manager 的数据保存在 <code>docker-compose.yml</code> 同目录下 <code>.data</code> 文件夹，证书保存在 <code>./letsencrypt</code> 文件夹。<br>也可以自己修改路径。</p><div class="note warning modern"><p>由于都需要使用 80 &#x2F; 443 端口，所以如果宿主机有安装 Nginx ，请先禁用</p></div><p>使用 <code>docker compose</code> 运行 Nginx Proxy Manager</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose pull </span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h2 id="访问面板"><a href="#访问面板" class="headerlink" title="访问面板"></a>访问面板</h2><p>启动后，访问 <code>http://&lt;server_ip&gt;:81</code> 即可打开管理面板。   </p><p><img src="https://img.nep.me/i/2024/12/15/3w01bl-2.webp" alt="nginx-proxy-manager-login-screen"></p><p>默认管理员用户如下，登陆后会要求重新设置邮箱与密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>启动后，请立即登陆面板，设置账户与密码</p></div><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>安装完成后，我们可以在顶部查看 Nginx Proxy Manager 的功能区</p><ul><li><strong>Hosts</strong>: 反代站点管理</li><li><strong>Access Lists</strong>: 管理访问限制策略</li><li><strong>SSL Certificates</strong> : SSL 证书管理</li><li><strong>Users</strong> : 用户管理，Nginx Proxy Manager 提供简单的用户管理</li><li><strong>Audit Log</strong> : 日志</li><li><strong>Settings</strong> : 设置当请求的域名不在站点列表时的回应</li></ul><img src="https://img.nep.me/i/2024/12/15/8rqhli-2.webp" style="width:50%;" alt="image"><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>首先我们需要为域名申请证书，点击顶部的 <code>SSL Certificates</code> ，再点击 <code>Add SSL Certificate</code><br><img src="https://img.nep.me/i/2024/12/15/3us18w-2.webp" alt="Nginx Proxy Manager get SSL"></p><p>Nginx Proxy Manager 生成的证书会自动续期。  </p><h3 id="单域名证书"><a href="#单域名证书" class="headerlink" title="单域名证书"></a>单域名证书</h3><p>如果我们申请单域名证书，只需要</p><ul><li>将域名解析到服务器</li><li><strong>Domain Names</strong> 填写需要申请证书的域名</li><li>填写 Let’s Encrypt 需要使用的邮箱</li><li>同意 Let’s Encrypt Terms of Service </li><li>然后点击 <strong>Save</strong> 就可以了</li></ul><p><img src="https://img.nep.me/i/2024/12/15/3zn2an-2.webp" alt="Nginx Proxy Manager Add Single Cert"> </p><p>当然保存前可以先点击 <strong>Test Server Reachability</strong> 测试一下<br><img src="https://img.nep.me/i/2024/12/15/408w0j-2.webp" alt="Nginx Proxy Manager Test Reachability"></p><h3 id="申请泛域名证书"><a href="#申请泛域名证书" class="headerlink" title="申请泛域名证书"></a>申请泛域名证书</h3><p>申请 ***.example.com** 泛域名证书需要修改 DNS 记录，需要通过 API 的方式申请，Nginx Proxy Manager 的支持列表非常的长，这里以 Cloudflare 为例。  </p><p>首先我们需要获取 API 令牌，访问 <a href="https://dash.cloudflare.com/profile/api-tokens">https://dash.cloudflare.com/profile/api-tokens</a> 点击 <strong>创建令牌</strong>，下一步中选择使用 <code>编辑区域 DNS</code> 对应的 <mark class="hl-label blue">使用模版</mark>。<br><img src="https://img.nep.me/i/2024/12/15/45kt7a-2.webp"></p><p>下一步种设置具体的令牌信息：</p><ul><li><strong>令牌名称</strong>：改个用于区分的名字</li><li><strong>权限</strong>：保持默认 <strong>编辑</strong></li><li><strong>区域资源</strong>： 特定区域，然后选择对应的域名</li><li><strong>客户端 IP 筛选</strong>：设置可以使用令牌的 IP，可以选择 在 ，然后填写您的服务器 IP</li><li><strong>TTL</strong>： 令牌有效期，默认是永久有效<img src="https://img.nep.me/i/2024/12/15/46p2d9-2.webp" style="width:75%;" alt="Clodflare API Token Config"></li></ul><p>点击 <mark class="hl-label blue">继续以显示摘要</mark> ，确认令牌的信息，如果没有错误，点击 <mark class="hl-label blue">创建令牌</mark></p><p>创建后将显示 Token ，点击 <strong>Copy</strong> 复制。<br><img src="https://img.nep.me/i/2024/12/15/4ajdxe-2.webp"></p><div class="note info modern"><p>只有这一次机会查看 Token 明文，无法再次查看。 </p></div><p>然后在 Nginx Proxy Manager 中申请证书 </p><ul><li><strong>Domain Names</strong> 填写 <code>*.example.com</code> 与 <code>expample.com</code></li><li>填写 Let’s Encrypt 需要使用的邮箱</li><li>打开 <strong>Use a DNS Challenge</strong></li><li><strong>DNS Provide</strong> 选择 <strong>Cloudflare</strong></li><li>替换 <strong>Credential File Content</strong> 中的 <code>token</code> </li><li>同意 Let’s Encrypt Terms of Service</li><li>点击 <code>Save</code> 申请</li></ul><img src="https://img.nep.me/i/2024/12/15/51nizh-2.webp" style="width:50%;" alt="image"><p>成功后即会在列表中显示<br><img src="https://img.nep.me/i/2024/12/15/545b7p-2.webp"> </p><h2 id="添加反代站点"><a href="#添加反代站点" class="headerlink" title="添加反代站点"></a>添加反代站点</h2><h3 id="示例：反代管理页面"><a href="#示例：反代管理页面" class="headerlink" title="示例：反代管理页面"></a>示例：反代管理页面</h3><p>Nginx Proxy Manager 默认端口是报漏在公网中的，这很不安全，如果设置完成后取消这个端口映射，以后需要修改配置时又比较麻烦，我们可以设置一个二级域名来访问，首先解析一个二级域名例如 <code>nginx.example.com</code> 指向服务器。</p><p>在 <code>Hosts</code> &gt; <code>Proxy Hosts</code> 中点击 <code>Add Proxy Host</code> 添加站点，管理页面的目标地址是 <code>http://127.0.0.1:81</code></p><ul><li><strong>Domain Names</strong>: 填写你的二级域名</li><li><strong>Scheme</strong>: 目标网站的协议，<code>http</code></li><li><strong>Forward Hostname&#x2F;IP</strong>: 目标网站的域名或是 IP，这里填 <code>127.0.0.1</code></li><li><strong>Forward Port</strong>: 目标网站的端口 <code>81</code></li><li><strong>Cache Assets</strong>： 是否启用缓存</li><li><strong>Block Common Exploits</strong>: 阻止常见漏洞</li><li><strong>Websockets Support</strong>: 是否开启 Websockets 支持 </li><li><strong>Accessible</strong>: 设置访问限制</li></ul><img src="https://img.nep.me/i/2024/12/15/5qnmd0-2.webp" style="width:50%;" alt="image"><p>然后点击顶部 <code>SSL</code> 选择证书</p><ul><li><strong>Force SSL</strong> : 是否强制使用 <code>https://</code> 访问</li><li><strong>HTTP&#x2F;2 Support</strong> : 是否开启 HTTP&#x2F;2 支持</li><li><strong>HSTS Enabled</strong> : 是否开启 HSTS ，开启后用户访问过一次之后将只会使用 https 访问</li><li><strong>HSTS Subdomains</strong> : 子域名是否开启 HSTS</li></ul><img src="https://img.nep.me/i/2024/12/15/5lxr81-2.webp" style="width:50%;" alt="image"><details class="toggle" ><summary class="toggle-button" style="">Advanced</summary><div class="toggle-content"><p>我们可以在 Advanced 中添加自定义设置，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line">gzip_comp_level 2;</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml;</span><br><span class="line">gzip_vary on;</span><br></pre></td></tr></table></figure><p>最中将被插入在站点配置中。</p><p>如果添加 <code>Location</code> 段则必须包含转发转发内容。</p></div></details><p>然后使用浏览器访问 <code>https://nginx.example.com</code> ，如果可以成功访问，我们就可以注释掉 docker 配置文件中的管理端口了！</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">  <span class="comment"># - &#x27;81:81&#x27;</span></span><br></pre></td></tr></table></figure><p>然后重新创建并运行 Nginx Proxy Manager 容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><div class="note info modern"><p>因为管理页面位于容器内部，所以可以使用 <code>127.0.0.1</code></p></div><p>无法使用 <code>127.0.0.1</code> 反代宿主机以及宿主机上的其他 Docker 容器的服务，需要使用 <code>ip addr show docker0</code> 查看 docker 网络的 ip 地址，一般为 <code>172.17.0.1</code>, 并且其他 docker 容器的也需要设置监听到 <code>172.17.0.1</code> 而非 <code>127.0.0.1</code> 来关闭公网访问</p><p><img src="https://img.nep.me/i/2024/12/15/72czrt-2.webp"></p><h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><p>Nginx Proxy Manager 添加的站点的配置位于宿主机 <code>data/nginx/proxy_host</code> ，以数字递增的 <code>conf</code> 文件。</p><h3 id="反代宿主机的静态站点"><a href="#反代宿主机的静态站点" class="headerlink" title="反代宿主机的静态站点"></a>反代宿主机的静态站点</h3><p>我原本在服务器上使用 Nginx 设置了几个静态站点，使用 Nginx Proxy Manager 后就无法直接访问了，由于两个无法同时监听相同的端口，我们可以设置 Nginx 监听 127.0.0.1:8080 ，然后使用 Nginx Proxy Manager 添加指向 Nginx 的反向代理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你是个人用户，且主要使用 Nginx 的反向代理功能，Nginx Proxy Manager 是一个简化设置流程的理想选择，尤其在 SSL 证书配置方面更为便捷，更适合初学者，也可以在局域网内使用。<br>如果你需要直接使用 Nginx 提供网站服务，尤其是在<strong>生产环境</strong>中，推荐选择手动配置 Nginx，以充分发挥其性能和灵活性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于现在网站来说， HTTPS 证书已经必不可少，虽然我们已经可以使用 Let’s Encrypt 获取免费证书，并且可以使用 acme.s</summary>
      
    
    
    
    <category term="教程" scheme="http://ooo.run/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Docker" scheme="http://ooo.run/tags/Docker/"/>
    
    <category term="Nginx Proxy Manager" scheme="http://ooo.run/tags/Nginx-Proxy-Manager/"/>
    
    <category term="HTTPS" scheme="http://ooo.run/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>我的 Hexo Butterfly 主题设置</title>
    <link href="http://ooo.run/post/my-config-of-hexo-theme-butterfly.html"/>
    <id>http://ooo.run/post/my-config-of-hexo-theme-butterfly.html</id>
    <published>2024-12-14T16:22:27.000Z</published>
    <updated>2024-12-14T19:12:41.239Z</updated>
    
    <content type="html"><![CDATA[<p>这里是我对 Hexo Buttery 进行设置的修改，与其他设置，仅供参考。</p><h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><h3 id="修改菜单部分"><a href="#修改菜单部分" class="headerlink" title="修改菜单部分"></a>修改菜单部分</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tag</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">语言||</span> <span class="attr">fas fa-language:</span></span><br><span class="line">    <span class="attr">English:</span> <span class="string">/en/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-e</span></span><br><span class="line">    <span class="string">中文:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-c</span></span><br><span class="line">    <span class="string">日本語:</span> <span class="string">/ja/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-j</span> </span><br></pre></td></tr></table></figure><h3 id="允许代码块全屏"><a href="#允许代码块全屏" class="headerlink" title="允许代码块全屏"></a>允许代码块全屏</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_blocks:</span></span><br><span class="line">  <span class="attr">fullpage:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="修改个人图片"><a href="#修改个人图片" class="headerlink" title="修改个人图片"></a>修改个人图片</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="设置-TOC-自动展开"><a href="#设置-TOC-自动展开" class="headerlink" title="设置 TOC 自动展开"></a>设置 TOC 自动展开</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="comment"># expand: false</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="开启搜索"><a href="#开启搜索" class="headerlink" title="开启搜索"></a>开启搜索</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">local_search</span></span><br></pre></td></tr></table></figure><h3 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">artalk</span></span><br><span class="line"></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line"><span class="comment"># artalk 的设置</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h3 id="note-块不要圆角"><a href="#note-块不要圆角" class="headerlink" title="note 块不要圆角"></a>note 块不要圆角</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line"> <span class="attr">border_radius:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="开启图片灯箱"><a href="#开启图片灯箱" class="headerlink" title="开启图片灯箱"></a>开启图片灯箱</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lightbox: fancybox</span><br></pre></td></tr></table></figure><h2 id="引入自定义-CSS"><a href="#引入自定义-CSS" class="headerlink" title="引入自定义 CSS"></a>引入自定义 CSS</h2><p>创建自定义样式文件 <code>source/css/custom.styl</code>，填入以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* note 块，代码块， tab 块 不要圆角 */</span> </span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.tabs</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">figure</span><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 给图片价格边框 */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>; <span class="comment">/* 1px 灰色边框 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;           <span class="comment">/* 图片内边距为 2px */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box; <span class="comment">/* 保证边框和内边距不影响图片尺寸 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件 <code>_config.butterfly.yml</code> 的 <code>inject &gt; head</code> 引入样式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><code>.styl</code> 会被 Hexo 渲染成 <code>.css</code> 文件，所以此处应为 <code>custom.css</code> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里是我对 Hexo Buttery 进行设置的修改，与其他设置，仅供参考。&lt;/p&gt;
&lt;h2 id=&quot;配置修改&quot;&gt;&lt;a href=&quot;#配置修改&quot; class=&quot;headerlink&quot; title=&quot;配置修改&quot;&gt;&lt;/a&gt;配置修改&lt;/h2&gt;&lt;h3 id=&quot;修改菜单部分&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="笔记" scheme="http://ooo.run/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Butterfly" scheme="http://ooo.run/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>在 Debian 中安装 Docker 以及 Docker Compose</title>
    <link href="http://ooo.run/post/debian-install-docker.html"/>
    <id>http://ooo.run/post/debian-install-docker.html</id>
    <published>2024-12-14T09:04:34.000Z</published>
    <updated>2024-12-14T16:17:08.593Z</updated>
    
    <content type="html"><![CDATA[<p>现在越来越多的应用可以使用 Docker 一键部署，本文将介绍如何在 Debian 12 中安装 Docker 与 Docker Compose。</p><p>验证环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~# lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:Debian</span><br><span class="line">Description:Debian GNU/Linux 12 (bookworm)</span><br><span class="line">Release:12</span><br><span class="line">Codename:bookworm</span><br></pre></td></tr></table></figure><p>安装同样适用于 Debian 11 以及 Ubuntu 24.04</p><h2 id="Docker-介绍"><a href="#Docker-介绍" class="headerlink" title="Docker 介绍"></a>Docker 介绍</h2><p>Docker 是一个开源的容器化平台，它可以将应用程序及其依赖打包到一个轻量级、可移植的容器中，使其能够在任何环境中一致地运行。</p><ul><li><strong>轻量</strong>：容器共享宿主机的操作系统内核，启动速度快，占用资源少。</li><li><strong>可移植</strong>：容器可以在开发、测试和生产环境中一致运行，解决“环境不一致”的问题。</li><li><strong>隔离性</strong>：每个容器都是独立运行的，互不影响。</li><li><strong>快速部署</strong>：通过镜像技术，实现应用的快速打包、发布和部署。</li></ul><h2 id="Docker-Compose-介绍"><a href="#Docker-Compose-介绍" class="headerlink" title="Docker Compose 介绍"></a>Docker Compose 介绍</h2><p>Docker Compose 是 Docker 提供的用于定义和管理多容器应用的工具。通过一个简单的 YAML 文件<code>docker-compose.yml</code>，你可以定义和启动多个服务容器，使得应用的部署和管理更加便捷，可以不必使用 Docker run 命令。 </p><p>特点：</p><ul><li><strong>多容器管理</strong>：同时启动、停止和管理多个容器。</li><li><strong>通过 YAML 配置</strong>：通过 docker-compose.yml 定义服务、网络、存储等。</li><li><strong>简化命令</strong>：使用单一命令 docker compose 管理容器</li></ul><p>本文将介绍安装 V2 版本，对应的命令是 <code>docker compose</code> </p><h2 id="使用官方源安装"><a href="#使用官方源安装" class="headerlink" title="使用官方源安装"></a>使用官方源安装</h2><p>以下操作需要在 root 用户下完成，请使用 <code>sudo -i</code> 或 <code>su root</code> 切换到 root 用户进行操作。</p><p>首先，安装一些必要的软件包： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade -y</span><br><span class="line">apt install curl vim wget gnupg dpkg apt-transport-https lsb-release ca-certificates</span><br></pre></td></tr></table></figure><p>然后加入 Docker 的 GPG 公钥和 apt 源：</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Debian</button><button type="button" class="tab">Ubuntu</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>国内机器可以用 <a href="https://mirrors.tuna.tsinghua.edu.cn/">清华 TUNA</a> 的国内源：</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Debian</button><button type="button" class="tab">Ubuntu</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>然后更新系统后即可安装 Docker CE 和 Docker Compose 插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker version</code> 命令检查是否安装成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           27.4.0</span><br><span class="line"> API version:       1.47</span><br><span class="line"> Go version:        go1.22.10</span><br><span class="line"> Git commit:        bde2b89</span><br><span class="line"> Built:             Sat Dec  7 10:38:57 2024</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          27.4.0</span><br><span class="line">  API version:      1.47 (minimum version 1.24)</span><br><span class="line">  Go version:       go1.22.10</span><br><span class="line">  Git commit:       92a8393</span><br><span class="line">  Built:            Sat Dec  7 10:38:57 2024</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.7.24</span><br><span class="line">  GitCommit:        88bf19b2105c8b17560993bee28a01ddc2f97182</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.2.2</span><br><span class="line">  GitCommit:        v1.2.2-0-g7cb3632</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><p>如果需要以非 root 模式运行 Docker，那么可以把特定用户也加入 docker 组，比如我们把 www-data 用户加进去：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install docker-ce-rootless-extras</span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker www-data</span><br></pre></td></tr></table></figure><h2 id="Docker-Compose-V2"><a href="#Docker-Compose-V2" class="headerlink" title="Docker Compose V2"></a>Docker Compose V2</h2><p>我们已安装 <code>docker-compose-plugin</code>，这会为 Docker 添加 <code>docker compose</code> 命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~# docker compose version </span><br><span class="line">Docker Compose version v2.31.0</span><br></pre></td></tr></table></figure><h2 id="修改-Docker-配置"><a href="#修改-Docker-配置" class="headerlink" title="修改 Docker 配置"></a>修改 Docker 配置</h2><p>以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">    &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;max-size&quot;: &quot;20m&quot;,</span></span><br><span class="line"><span class="string">        &quot;max-file&quot;: &quot;3&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;ipv6&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;fixed-cidr-v6&quot;: &quot;fd00:dead:beef:c0::/80&quot;,</span></span><br><span class="line"><span class="string">    &quot;experimental&quot;:true,</span></span><br><span class="line"><span class="string">    &quot;ip6tables&quot;:true</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>然后重启 Docker 服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Docker-常用命令使用介绍"><a href="#Docker-常用命令使用介绍" class="headerlink" title="Docker 常用命令使用介绍"></a>Docker 常用命令使用介绍</h2><p>快速了解一下 docker 常见命令，使用 <code>docker compose</code> 进行管理会更方便。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull &lt;镜像名&gt;:&lt;标签&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有容器（包括已停止的）</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi &lt;镜像ID或名称&gt;</span><br><span class="line">docker rmi ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器 </span></span><br><span class="line">docker run -d -p &lt;宿主端口&gt;:&lt;容器端口&gt; --name &lt;容器名&gt; &lt;镜像名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动，停止，重启，删除</span></span><br><span class="line">docker start / stop / restart / <span class="built_in">rm</span> &lt;容器名或ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器执行交互式命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;容器名或ID&gt; /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">docker logs &lt;容器名或ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 Docker 使用的磁盘空间：</span></span><br><span class="line">docker system <span class="built_in">df</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有未被使用的镜像</span></span><br><span class="line">docker image prune -a</span><br></pre></td></tr></table></figure><h2 id="Docker-Compose-使用介绍"><a href="#Docker-Compose-使用介绍" class="headerlink" title="Docker Compose 使用介绍"></a>Docker Compose 使用介绍</h2><p><code>docker compose</code> 需要在 <code>docker-compose.yml</code> 文件所在的工作目录执行，这里推荐创建一个工作目录，在其中统一存放配置文件，比如： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker/</span><br><span class="line">├── nginx/                         </span><br><span class="line">│   └── docker-compose.yml            </span><br><span class="line">├── mysql/                          </span><br><span class="line">│   └── docker-compose.yml          </span><br><span class="line">└── redis/                           </span><br><span class="line">    └── docker-compose.yml   </span><br></pre></td></tr></table></figure><p><code>docker compose</code> 常用命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取，更新镜像</span></span><br><span class="line">docker compose pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker compose up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker compose stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器，并移除创建的网络、卷和镜像</span></span><br><span class="line">docker compose down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker compose restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在运行的服务</span></span><br><span class="line">docker compose ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker compose logs</span><br><span class="line"><span class="comment"># 查看实时日志</span></span><br><span class="line">docker compose logs -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器。执行交互命令</span></span><br><span class="line">docker compose <span class="built_in">exec</span> &lt;服务名&gt; &lt;命令&gt;</span><br><span class="line">docker compose <span class="built_in">exec</span> nginx /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务统计信息，实时显示 CPU、内存等资源使用情况。</span></span><br><span class="line">docker compose stats</span><br></pre></td></tr></table></figure><p><code>docker compose</code> 还是太长？ 执行下面的命令后就可以使用 <code>dc</code> 作为替代：</p><div class="note info modern"><p>执行前，先运行一下 <code>dc</code> 确认命令当前没有在使用，执行后运行 <code>dc version</code> 确认</p></div><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">bash</button><button type="button" class="tab">zsh</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;alias dc=&quot;docker compose&quot;&#x27;</span> &gt;&gt; ~/.bashrc </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc </span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;alias dc=&quot;docker compose&quot;&#x27;</span> &gt;&gt; ~/.zshrc </span><br><span class="line"><span class="built_in">source</span> ~/.zshrc </span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>效果:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~# dc</span><br><span class="line">-bash: dc: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">root@debian:~# dc version</span><br><span class="line">Docker Compose version v2.31.0</span><br></pre></td></tr></table></figure><p>之后，当我们创建了 <code>docker-compose.yml</code> 文件后，启动或是更新服务只需要执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dc pull </span><br><span class="line">dc up -d </span><br></pre></td></tr></table></figure><p>现在前往 GitHub 或是 <a href="https://hub.docker.com/">Docker Hub</a> 寻找有趣的项目吧！</p><p>参考： <a href="https://u.sb/debian-install-docker/">Debian 12 &#x2F; Ubuntu 24.04 安装 Docker 以及 Docker Compose 教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在越来越多的应用可以使用 Docker 一键部署，本文将介绍如何在 Debian 12 中安装 Docker 与 Docker Compose。&lt;/p&gt;
&lt;p&gt;验证环境&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="教程" scheme="http://ooo.run/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Docker" scheme="http://ooo.run/tags/Docker/"/>
    
    <category term="Docker Compose" scheme="http://ooo.run/tags/Docker-Compose/"/>
    
    <category term="Debian" scheme="http://ooo.run/tags/Debian/"/>
    
    <category term="Linux" scheme="http://ooo.run/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>为 Hexo 博客添加评论系统，Giscus or Twikoo or Arttalk or Disqus</title>
    <link href="http://ooo.run/post/how-to-add-comment-system-for-static-blog.html"/>
    <id>http://ooo.run/post/how-to-add-comment-system-for-static-blog.html</id>
    <published>2024-12-13T17:17:20.000Z</published>
    <updated>2024-12-14T17:32:52.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>静态博客系统不像 Wordpress 一样自带评论系统，不过由于使用静态博客的人越来越多，社区已经有了多种评论系统可以供我们选择。</p><p>如果你还没有属于自己的博客，可以查看： <a href="https://ooo.run/post/start-blog-with-hexo-and-github.html" target="_blank">使用 Hexo + GitHub 建立个人博客</a></p><p>本文将基于Hexo Butterfly 主题介绍以下四种评论系统的添加方法，可以选择一个适合自己的，同样适用于其他主题或是其他博客系统：</p><ul><li><a href="https://giscus.app/zh-CN"><strong>Giscus</strong></a>： 评论托管在 GitHub 上，用户评论必须使用 <strong>GitHub</strong> 账户登陆，在开发者中比较流行。</li><li><a href="https://twikoo.js.org/"><strong>Twikoo</strong></a>：可以<strong>自己托管</strong>的评论系统，用户评论无需登陆，可以使用第三方云服务托管。</li><li><a href="https://artalk.js.org/"><strong>Artalk</strong></a>: 同样可以<strong>自己托管</strong>，相比于 Twikoo 国际化更好<strong>支持更多的显示语言</strong>，需要有一个服务器部署。</li><li><strong>Disqus</strong>： 设置上相对最简单，用户评论必须登陆，需要有 <strong>Disqus</strong> 账户，<strong>会有广告</strong>，中国大陆可能<strong>无法访问</strong></li></ul><p>更多的评论系统可以查看 <a href="https://butterfly.js.org/posts/4aa8abbe/?highlight=comment#%E8%A9%95%E8%AB%96">Butterfly 设置文档</a></p><h2 id="Giscus"><a href="#Giscus" class="headerlink" title="Giscus"></a>Giscus</h2><p>Giscus 是一个基于 GitHub Discussions 的评论，其他基于 Github 的评论系统还有 Gitalk 、Utterances 等，推荐使用 Giscus ，设置更为简单一些，而且请求的权限更少。</p><p><a href="https://github.com/giscus/giscus/blob/main/README.zh-CN.md">中文介绍</a></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote><ol><li>你的仓库必须是公开的 (public)，否则访客将无法查看 discussion        </li><li>你的 GitHub 已安装 giscus app ，否则访客将无法评论和回应        </li><li>在你的仓库中启用 Discussions 功能</li></ol></blockquote><p>设置步骤如下</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>首先访问 <a href="https://github.com/new">https://github.com/new</a> 创建一个<strong>公开</strong>的 GitHub 仓库，可以叫做 <strong>blog-commnts</strong></p><h3 id="开启-Discussions"><a href="#开启-Discussions" class="headerlink" title="开启 Discussions"></a>开启 Discussions</h3><p>在仓库的 Web 页面，点击顶部的 <strong>Settings</strong><br><img src="https://docs.github.com/assets/cb-51103/mw-1440/images/help/discussions/public-repo-settings-global-nav-update.webp"></p><p>向下滚动，在 <strong>Features</strong> 部分，勾选开启 <strong>Discussions</strong><br><img src="https://img.nep.me/i/2024/12/14/3uq699-2.webp" alt="GitHub repo enable Discussions "></p><h3 id="安装-Giscus-APP"><a href="#安装-Giscus-APP" class="headerlink" title="安装 Giscus APP"></a>安装 Giscus APP</h3><p>访问 <a href="https://github.com/apps/giscus">https://github.com/apps/giscus</a> 点击 <code>Install</code>，进入选择仓库界面<br>选择 <code>Only select repositories</code> ，然后选择刚才创建的 <strong>blog-commnts</strong> 仓库，点击 <code>Install</code></p><h3 id="获取-Giscus-设置"><a href="#获取-Giscus-设置" class="headerlink" title="获取 Giscus 设置"></a>获取 Giscus 设置</h3><p>访问 <a href="https://giscus.app/zh-CN">Giscus</a> ，从设置部分开始</p><ul><li>选择语言</li><li>设置仓库，填写上面创建的 <strong>blog-commnts</strong> 仓库</li><li>页面 ↔️ discussion 映射关系： 保持默认</li><li>Discussion 分类： 按照推荐选择 <strong>Announcements</strong></li><li>特性： 保持默认</li><li>主题： 保持默认，或是选择一个自己喜欢的</li></ul><p>在 <strong>启用 giscus</strong> 部分，我们将看到 Giscus 的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://giscus.app/client.js&quot;</span></span><br><span class="line">        data-repo=<span class="string">&quot;&lt;username&gt;/blog-commnts&quot;</span></span><br><span class="line">        data-repo-id=<span class="string">&quot;R_xxxxxxx&quot;</span></span><br><span class="line">        data-category=<span class="string">&quot;Announcements&quot;</span></span><br><span class="line">        data-category-id=<span class="string">&quot;DIC_xxxxxxx-b&quot;</span></span><br><span class="line">        data-mapping=<span class="string">&quot;pathname&quot;</span></span><br><span class="line">        data-strict=<span class="string">&quot;0&quot;</span></span><br><span class="line">        data-reactions-enabled=<span class="string">&quot;1&quot;</span></span><br><span class="line">        data-emit-metadata=<span class="string">&quot;0&quot;</span></span><br><span class="line">        data-input-position=<span class="string">&quot;bottom&quot;</span></span><br><span class="line">        data-theme=<span class="string">&quot;preferred_color_scheme&quot;</span></span><br><span class="line">        data-lang=<span class="string">&quot;zh-CN&quot;</span></span><br><span class="line">        crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">        <span class="keyword">async</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="启用-Giscus"><a href="#启用-Giscus" class="headerlink" title="启用 Giscus"></a>启用 Giscus</h3><p>编辑 Hexo 目录下的 <code>_config.butterfly.yml</code> 文件，找到 <code>comments</code> 部分：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span>  </span><br><span class="line">  <span class="comment"># 设置为 giscus</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">giscus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对照 Giscus 的配置填写</span></span><br><span class="line"><span class="attr">giscus:</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&quot;&lt;username&gt;/blog-commnts&quot;</span></span><br><span class="line">  <span class="attr">repo_id:</span> <span class="string">&quot;R_xxxxxxx&quot;</span></span><br><span class="line">  <span class="attr">category_id:</span> <span class="string">&quot;DIC_xxxxxxx-b&quot;</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>即可运行命令在网站查看评论预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="预览-Giscus"><a href="#预览-Giscus" class="headerlink" title="预览 Giscus"></a>预览 Giscus</h3><p><img src="https://img.nep.me/i/2024/12/14/42ljtq-2.webp"></p><h2 id="Twikoo-与-Artalk"><a href="#Twikoo-与-Artalk" class="headerlink" title="Twikoo 与 Artalk"></a>Twikoo 与 Artalk</h2><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>需要有一台已安装 Docker 与 Docker Compose 的服务器：<a href="https://ooo.run/post/debian-install-docker.html" target="_blank">在 Debian 中安装 Docker 以及 Docker Compose</a></li><li>分配一个子域名给 Twikoo &#x2F; Artalk 服务</li><li>设置好域名的 HTTPS 证书</li></ul><p>我们将使用 <code>docker compose</code> 管理 Twikoo 或 Artalk 服务。</p><h3 id="Twikoo-介绍"><a href="#Twikoo-介绍" class="headerlink" title="Twikoo 介绍"></a>Twikoo 介绍</h3><p><a href="https://twikoo.js.org/intro.html">Twikoo</a> 是一个简洁、安全、免费的静态网站评论系统。<br>Twikoo 可以选择使用云服务托管，支持腾讯云、Vercel 或是 Cloudflare wrokers 等第三方云平台，也可以选择部署至自己的 VPS 服务器上。  </p><p><a href="https://twikoo.js.org/backend.html">官方文档</a> 针对各个平台都提供了部署说明，由于使用第三方服务需要注册多个第三方平台账户，本文将仅介绍使用 Docker 进行私有部署方式。  </p><h3 id="Artalk-介绍"><a href="#Artalk-介绍" class="headerlink" title="Artalk 介绍"></a>Artalk 介绍</h3><p><a href="https://artalk.js.org/">Artalk</a> 同样是一款简单易用但功能丰富的评论系统，与 Twikoo 项目，Artalk 国际化更加友好，支持更多的语言，但是无法使用第三方云服务托管。</p><p>如果你也有一台 VPS 服务器，那么 Twikoo 和 Artalk 都是不错的选择，可以对比一下具体的功能与界面样式再做选择。 </p><h3 id="创建-docker-compose-yml"><a href="#创建-docker-compose-yml" class="headerlink" title="创建 docker-compose.yml"></a>创建 docker-compose.yml</h3><p>首先创建一个工作目录，然后在文件夹内创建 <code>docker-compose.yml</code> 文件，填入下面的内容</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Twikoo</button><button type="button" class="tab">Artalk</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">twikoo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">imaegoo/twikoo:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">twikoo</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 本机设置 Nginx 反代后可以设置为 - 127.0.0.1:8080:8080 关闭公网访问</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 数据存放路径:容器内路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/www/twikoo/data:/app/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">artalk:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">artalk</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">artalk/artalk-go</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:23366</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/artalk/data:/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ATK_LOCALE=zh-CN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ATK_SITE_DEFAULT=Artalk</span> <span class="string">的博客</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ATK_SITE_URL=https://your_domain</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取、更新镜像</span></span><br><span class="line">docker compose pull</span><br><span class="line"><span class="comment"># 启动后台</span></span><br><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用命令</span></span><br><span class="line">docker compose stop     <span class="comment"># 暂停容器</span></span><br><span class="line">docker compose down     <span class="comment"># 删除容器</span></span><br><span class="line">docker compose restart  <span class="comment"># 重启容器</span></span><br></pre></td></tr></table></figure><h3 id="设置-Nginx-反代"><a href="#设置-Nginx-反代" class="headerlink" title="设置 Nginx 反代"></a>设置 Nginx 反代</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  //...</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass 127.0.0.1:8080;</span><br><span class="line"></span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">    add_header X-Cache $upstream_cache_status;</span><br><span class="line">    # cache</span><br><span class="line">    add_header Cache-Control no-cache;</span><br><span class="line">    expires 12h;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="测试-Twikoo"><a href="#测试-Twikoo" class="headerlink" title="测试 Twikoo"></a>测试 Twikoo</h3><p>访问使用的域名，如果成功则提示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="number">100</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Twikoo 云函数运行正常，...&quot;</span>,<span class="string">&quot;version&quot;</span>:<span class="string">&quot;1.x.x&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="在主题中启用"><a href="#在主题中启用" class="headerlink" title="在主题中启用"></a>在主题中启用</h3><p>编辑 Hexo 目录下的 <code>_config.butterfly.yml</code> 文件： </p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Twikoo</button><button type="button" class="tab">Artalk</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span>  </span><br><span class="line">  <span class="comment"># 设置为 twikoo</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">twikoo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="comment"># envId 填写你的域名</span></span><br><span class="line">  <span class="attr">envId:</span> </span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>运行命令在网站查看评论预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Twikoo</button><button type="button" class="tab">Artalk</button></div><div class="tab-contents"><div class="tab-item-content active"><p><img src="https://img.nep.me/i/2024/12/14/5cyu50-2.webp" alt="Twikoo Preview"></p></div><div class="tab-item-content"></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="设置面板-Twikoo"><a href="#设置面板-Twikoo" class="headerlink" title="设置面板 - Twikoo"></a>设置面板 - Twikoo</h3><p>第一次打开 Twikoo 面板，需要设置 <strong>密码</strong> ，然后进入面板可以导入平路、设置站点信息、邮件发送、消息推送等功能。</p><h2 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h2><h3 id="获取-shortname"><a href="#获取-shortname" class="headerlink" title="获取 shortname"></a>获取 shortname</h3><p>首先需要注册一个 <a href="https://disqus.com/">Disqus</a> 账户，然后访问 <a href="https://disqus.com/admin/create/">https://disqus.com/admin/create/</a>  进入站点创建页面</p><p>其中 Website Name 填写的就是我们之后需要用到的 <code>shortname</code><br><img src="https://img.nep.me/i/2024/12/14/2l4x2b-2.webp"></p><p>点击 create site 后进入 Install 界面，我们不需要从这里安装，可以直接关闭，当然也可以访问 <code>https://shortname.disqus.com/admin/</code> 修改站点的一些设置。</p><h3 id="在主题中启用-Disqus"><a href="#在主题中启用-Disqus" class="headerlink" title="在主题中启用 Disqus"></a>在主题中启用 Disqus</h3><p>编辑 Hexo 目录下的 <code>_config.butterfly.yml</code> 文件： </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span>  </span><br><span class="line">  <span class="comment"># 设置为 disqus</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">disqus</span></span><br><span class="line"></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="comment"># 填写 shortname</span></span><br><span class="line">  <span class="attr">shortname:</span></span><br></pre></td></tr></table></figure><p>即可运行命令在网站查看评论预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;静态博客系统不像 Wordpress 一样自带评论系统，不过由于使用静态博客的人越来越多，社区已经有了多种评论系统可以供我们选择。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="教程" scheme="http://ooo.run/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="http://ooo.run/tags/Hexo/"/>
    
    <category term="Blog" scheme="http://ooo.run/tags/Blog/"/>
    
    <category term="Twikoo" scheme="http://ooo.run/tags/Twikoo/"/>
    
    <category term="Artalk" scheme="http://ooo.run/tags/Artalk/"/>
    
    <category term="Giscus" scheme="http://ooo.run/tags/Giscus/"/>
    
  </entry>
  
  <entry>
    <title>如何在 macOS 中安装 Homebrew</title>
    <link href="http://ooo.run/post/how-to-install-homebrew-on-macos.html"/>
    <id>http://ooo.run/post/how-to-install-homebrew-on-macos.html</id>
    <published>2024-12-13T14:24:39.000Z</published>
    <updated>2024-12-14T04:54:41.808Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们在网络上看到别人使用 macOS 安装软件是使用的下面的命令，非常的方便。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install package</span><br></pre></td></tr></table></figure><p>本文将介绍如何在 macOS 15 中安装 <a href="https://brew.sh/zh-cn/">Homebrew</a> ，让这个命令在您的 mac 中也生效，同时在安装 Homebrew 后，<code>Git</code> 也将会被安装。</p><h2 id="什么是-Homebrew"><a href="#什么是-Homebrew" class="headerlink" title="什么是 Homebrew"></a>什么是 Homebrew</h2><p>Homebrew 是一款自由及开放源代码的软件包管理系统，用以简化 macOS 系统上的软件安装过程。它拥有安装、卸载、更新、查看、搜索等很多实用的功能，通过简单的一条指令，就可以实现包管理，十分方便快捷。</p><h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><p>打开终端程序，<a href="https://support.apple.com/zh-cn/guide/terminal/apd5265185d-f365-44cb-8b09-71a064a42125/mac">在 Mac 上打开或退出“终端”</a>：</p><ul><li>启动台 &gt; 其他 &gt; 终端</li><li><strong>启动台</strong> 或是　<code>Commond⌘ + 空格</code> 打开聚焦搜索，搜索 <strong>终端</strong> 或是 <strong>Terminal</strong></li></ul><h3 id="官方源安装"><a href="#官方源安装" class="headerlink" title="官方源安装"></a>官方源安装</h3><p>复制安装命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>在终端内执行安装命令，安装时需要输入你的电脑密码进行授权：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Checking <span class="keyword">for</span> `<span class="built_in">sudo</span>` access (<span class="built_in">which</span> may request your password)...</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure><p>brew 会提示将安装的软件以及创建的文件夹，按回车继续，等待下载和安装完成。</p><p>结束后执行 <code>brew -v</code> 测试显示依然是错误 <code>zsh: command not found: brew</code><br><img src="https://img.nep.me/i/2024/12/13/10x6kyz-2.webp"></p><p>需要照提示复制执行下面的三条命令添加 PATH ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> &gt;&gt; /Users/me/.zprofile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; /Users/me/.zprofile</span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(/opt/homebrew/bin/brew shellenv)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>如果使用了 <code>oh-my-zsh</code> ，则使用下面的命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/opt/homebrew/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc   </span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>bash 用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/opt/homebrew/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc   </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>然后可以执行 <code>brew -v</code> 测试安装结果，会成功显示 Hombrew 的版本号。   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;brew -v</span><br><span class="line">Homebrew 4.4.11</span><br></pre></td></tr></table></figure><p>此时我们就可以使用 <code>brew install</code> 命令了 </p><h3 id="镜像源安装-中国大陆"><a href="#镜像源安装-中国大陆" class="headerlink" title="镜像源安装(中国大陆)"></a>镜像源安装(中国大陆)</h3><div class="note info modern"><p>中国大陆用户推荐使用镜像源安装</p></div><p>可以直接使用下面的安装脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><p>或是继续查看下面的内容</p><p>替换使用 <a href="https://developer.aliyun.com/mirror/homebrew/">阿里镜像源</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bash 用户</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_API_DOMAIN=&quot;https://mirrors.aliyun.com/homebrew-bottles/api&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.aliyun.com/homebrew/brew.git&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.aliyun.com/homebrew/homebrew-core.git&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.aliyun.com/homebrew/homebrew-bottles&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># zsh 用户</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_API_DOMAIN=&quot;https://mirrors.aliyun.com/homebrew-bottles/api&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.aliyun.com/homebrew/brew.git&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.aliyun.com/homebrew/homebrew-core.git&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=&quot;https://mirrors.aliyun.com/homebrew/homebrew-bottles&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>进行安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从阿里云下载安装脚本并安装 Homebrew </span></span><br><span class="line">git <span class="built_in">clone</span> https://mirrors.aliyun.com/homebrew/install.git brew-install</span><br><span class="line">/bin/bash brew-install/install.sh</span><br><span class="line"><span class="built_in">rm</span> -rf brew-install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可从 GitHub 获取官方安装脚本安装 Homebrew </span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew -v</span><br></pre></td></tr></table></figure><h2 id="Homebrew-使用介绍"><a href="#Homebrew-使用介绍" class="headerlink" title="Homebrew 使用介绍"></a>Homebrew 使用介绍</h2><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索软件</span></span><br><span class="line">brew search mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装默认版本</span></span><br><span class="line">brew install mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">brew mysql mysql@5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装桌面软件</span></span><br><span class="line">brew install --cask firefox</span><br></pre></td></tr></table></figure><h3 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看已安装软件</span></span><br><span class="line">brew list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看软件信息</span></span><br><span class="line">brew info mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看软件安装路径</span></span><br><span class="line">brew list mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级所有软件</span></span><br><span class="line">brew upgrade </span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级指定软件</span></span><br><span class="line">brew upgrade wget </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载软件</span></span><br><span class="line">brew uninstall wget</span><br></pre></td></tr></table></figure><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有服务</span></span><br><span class="line">brew services list </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定服务</span></span><br><span class="line">brew services info mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">brew services start mysql </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">brew services restart mysql </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停用服务</span></span><br><span class="line">brew services stop mysql </span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除服务</span></span><br><span class="line">brew services remove mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除所有未使用服务</span></span><br><span class="line">brew services cleanup</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查Homebrew</span></span><br><span class="line">brew doctor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级Homebrew</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h3 id="卸载Homebrew"><a href="#卸载Homebrew" class="headerlink" title="卸载Homebrew"></a>卸载Homebrew</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>参考： <a href="https://ken.io/note/macos-homebrew-install-and-configuration">在macOS上安装&amp;配置Homebrew</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时我们在网络上看到别人使用 macOS 安装软件是使用的下面的命令，非常的方便。  &lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa</summary>
      
    
    
    
    <category term="教程" scheme="http://ooo.run/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Homebrew" scheme="http://ooo.run/tags/Homebrew/"/>
    
    <category term="macOS" scheme="http://ooo.run/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 SSH key 连接 GitHub</title>
    <link href="http://ooo.run/post/how-to-add-ssh-key-to-github.html"/>
    <id>http://ooo.run/post/how-to-add-ssh-key-to-github.html</id>
    <published>2024-12-13T14:17:21.000Z</published>
    <updated>2024-12-14T04:55:09.376Z</updated>
    
    <content type="html"><![CDATA[<p>如果需要频繁的进行 GitHub pull&#x2F;push 操作，使用 SSH key 绑定到 GitHub 会更加方便，绑定后将使用公钥加密来验证用户身份，比传统的用户名和密码方式更安全。  </p><p>本文命令与截图对应下面的系统版本，需要先安装 <a href="https://git-scm.com/downloads">Git</a></p><ul><li><strong>Windows 11</strong> : 一般安装 <code>64-bit Git for Windows Setup</code>, 安装选项全部<strong>默认</strong>即可</li><li><strong>macOS 15.1</strong> : 更推荐通过安装 <a href="https://brew.sh/">Homebrew</a> 获取 Git 程序，查看 <a href="https://ooo.run/post/how-to-install-homebrew-on-macos.html">如何在 macOS 中安装 Homebrew </a></li></ul><h2 id="打开终端程序"><a href="#打开终端程序" class="headerlink" title="打开终端程序"></a>打开终端程序</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li>右键点击开始菜单，选择终端</li><li>或是按 <code>Windows + R</code> 快捷键打开 <strong>运行</strong> 窗口，输入 <code>cmd</code> ，回车打开</li></ul><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><ul><li>启动台 &gt; 其他 &gt; 终端</li><li><strong>启动台</strong> 或是　<code>Commond⌘ + 空格</code> 打开聚焦搜索，搜索 <strong>终端</strong> 或是 <strong>Terminal</strong></li></ul><p>安装 Git 后，使用 <code>git -v</code> 测试，如果安装成功会显示版本号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git -v</span><br><span class="line">git version 2.47.1</span><br></pre></td></tr></table></figure><p>然后设置 Git 的个人信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="测试一下-github-com"><a href="#测试一下-github-com" class="headerlink" title="测试一下 github.com"></a>测试一下 github.com</h2><div class="note info modern"><p>Windows 10 用户可以使用 Git Bash</p></div><div class="note warning modern"><p>测试时会自动创建 <code>.ssh</code> 文件夹，因此你也需要测试一下</p></div><p>打开终端程序，运行测试命令，如果是第一次运行，需要输入 <code>yes</code> 确认</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>我们没有添加过 SSH key，会提示 <code>Permission denied (publickey).</code></p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Windows</button><button type="button" class="tab">macOS</button></div><div class="tab-contents"><div class="tab-item-content active"><p><img src="https://img.nep.me/i/2024/12/13/122owl6-2.webp"></p></div><div class="tab-item-content"><p><img src="https://img.nep.me/i/2024/12/13/124oz3l-2.webp"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="创建-SSH-Key"><a href="#创建-SSH-Key" class="headerlink" title="创建 SSH Key"></a>创建 SSH Key</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ME\.ssh&gt;ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line"><span class="comment"># 设置保存文件名，留空则为 id_rsa</span></span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (C:\Users\ME/.ssh/id_rsa):</span><br><span class="line"><span class="comment"># 设置密码，留空则是没有密码</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line"><span class="comment"># 确认密码</span></span><br><span class="line">Enter same passphrase again:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成的私钥</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\ME/.ssh/id_rsa</span><br><span class="line"><span class="comment"># 生成的公钥</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\ME/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><div class="note warning modern"><p><code>.pub</code> 后缀的是公钥，可以公开，<strong>私钥相当于个人密码，要小心保存</strong></p></div><div class="note info modern"><p>git 默认会查找名称为 <code>id_rsa</code> 的 SSH key </p></div><div class="note primary modern"><p>如果设置了文件名称，或是生成其他格式的 SSH key 可以查看后文的配合 <code>SSH config</code> 的部分</p></div><div class="note default modern"><p>rsa 格式的 key 内容很长，使用 <code>ssh-keygen -t ed25519</code> 生成 <code>ed25519</code> 格式的 key，更简洁，更安全</p></div><h2 id="添加公钥到-GitHub"><a href="#添加公钥到-GitHub" class="headerlink" title="添加公钥到 GitHub"></a>添加公钥到 GitHub</h2><p>使用命令或是文本编辑器查看公钥的内容</p><ul><li>Windows 使用 <code>type id_rsa.pub</code> </li><li>macOS &#x2F; Linux 使用 <code>cat id_rsa.pub</code></li></ul><p>访问 <a href="https://github.com/settings/keys">Github - SSH Keys</a>，点击右上角 <strong>New SSH key</strong>。<br>手动访问路径：右上角点击 <strong>头像</strong> &gt; <strong>Settings</strong> &gt; <strong>SSH and GPG keys</strong> &gt; <strong>New SSH key</strong></p><p><img src="https://img.nep.me/i/2024/12/13/12s8co0-2.webp" alt="github-add-ssh-key"></p><ul><li><strong>Title</strong>：取个备注名字</li><li><strong>Key type</strong>：不需要修改，保持默认 <strong>Authentication Key</strong></li><li><strong>Key</strong>：粘贴 <code>id_rsa.pub</code> 对应的文本内容</li><li>点击 <code>Add SSH key</code> 保存</li></ul><p><img src="https://img.nep.me/i/2024/12/13/12sain9-2.webp" alt="github-add-ssh-key-details"></p><p>添加成功会在列表显示<br><img src="https://img.nep.me/i/2024/12/13/12vf7u0-2.webp" alt="github-add-ssh-key-done"></p><p>此时我们再执行测试命令，就会获得成功的欢迎提示。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;ssh -T git@github.com</span><br><span class="line">Hi &lt;Your username&gt;! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h2 id="配合-SSH-config-使用"><a href="#配合-SSH-config-使用" class="headerlink" title="配合 SSH config 使用"></a>配合 SSH config 使用</h2><p>如果我们的私钥的名称不是 <code>id_rsa</code> ，我们将仍然无法成功连接 GitHub ，你可以将私钥修改文件名后再试试 </p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Windows</button><button type="button" class="tab">macOS&Linux</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; rename id_rsa id_mysshkey</span><br><span class="line"></span><br><span class="line">&gt; ssh -T git@github.com</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">mv</span> id_rsa id_mysshkey</span><br><span class="line"></span><br><span class="line">&gt; ssh -T git@github.com</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>这时我们可以通过在 <code>.ssh</code> 文件夹中创建一个 <code>config</code> 文件，填入下面的内容来告诉 git 程序在哪里找到密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_mysshkey</span><br></pre></td></tr></table></figure><p>其中 <code>IdentityFile</code> 部分填写私钥的路径， <code>~</code> 代表用户 Home 目录</p><ul><li>Windows 相当于 <code>C:\Users\&lt;username&gt;\</code></li><li>macOS 相当于 <code>/Users/&lt;username&gt;/</code></li><li>Linux 相当于 <code>/root/</code> 或是 <code>/home/&lt;username&gt;/</code></li></ul><p>再进行测试，发现又能显示成功的欢迎消息。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;ssh -T git@github.com</span><br><span class="line">Hi &lt;Your username&gt;! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>以后就可以很方便的使用 Git 了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果需要频繁的进行 GitHub pull&amp;#x2F;push 操作，使用 SSH key 绑定到 GitHub 会更加方便，绑定后将使用公钥加密来验证用户身份，比传统的用户名和密码方式更安全。  &lt;/p&gt;
&lt;p&gt;本文命令与截图对应下面的系统版本，需要先安装 &lt;a href</summary>
      
    
    
    
    <category term="教程" scheme="http://ooo.run/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="GitHub" scheme="http://ooo.run/tags/GitHub/"/>
    
    <category term="SSH" scheme="http://ooo.run/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Docker 项目，使用 EasyImage 轻松搭建个人图床</title>
    <link href="http://ooo.run/post/docker-project-easy-images.html"/>
    <id>http://ooo.run/post/docker-project-easy-images.html</id>
    <published>2024-12-12T15:46:52.000Z</published>
    <updated>2024-12-13T16:31:20.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我们有时需要上传一些图片用于个人博客，或是其他项目分享，如果你也像我一样更加希望图片存放在自己的服务器上而不是第三方平台上，那么推荐搭建一个属于自己的图床。  </p><p>本文将介绍如何使用 Docker 快速部署一个基于 EasyImage 2 的图床服务。 </p><h3 id="EasyImage-特点"><a href="#EasyImage-特点" class="headerlink" title="EasyImage 特点"></a>EasyImage 特点</h3><p><strong>EasyImage</strong> 简单强大，无数据库非常适合小服务器。  </p><ul><li>支持WebP格式转换</li><li>支持仅登录后上传</li><li>支持设置图片质量</li><li>支持文字&#x2F;图片水印</li><li>支持设置图片指定宽&#x2F;高</li><li>支持上传图片转换为指定格式</li><li>支持限制最低宽度&#x2F;高度上传</li><li>支持API</li><li>在线管理图片</li><li>等更多功能</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>本文的命令适用于 Debian 12，并且需要在 root 用户下完成，请使用 <code>sudo -i</code> 或 <code>su root</code> 切换到 root 用户进行操作。</p><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>相比于直接安装 Debian 仓库中的 docker，更推荐使用 Docker 官方的源进行安装，并且将安装 <code>docker compose</code> 进行管理 Docker 项目。</p><p>首先需要更新和安装软件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade -y</span><br><span class="line">apt install curl vim wget gnupg dpkg apt-transport-https lsb-release ca-certificates</span><br></pre></td></tr></table></figure><p>然后加入 Docker 的 GPG 公钥和 apt 源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中国大陆的机器可以用清华 TUNA 的国内源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>然后更新系统后即可安装 Docker CE 和 Docker Compose 插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><p>此时可以使用 <code>docker version</code> 命令检查是否安装成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           27.3.1</span><br><span class="line"> API version:       1.47</span><br><span class="line"> Go version:        go1.22.7</span><br><span class="line"> Git commit:        ce12230</span><br><span class="line"> Built:             Fri Sep 20 11:41:11 2024</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          27.3.1</span><br><span class="line">  API version:      1.47 (minimum version 1.24)</span><br><span class="line">  Go version:       go1.22.7</span><br><span class="line">  Git commit:       41ca978</span><br><span class="line">  Built:            Fri Sep 20 11:41:11 2024</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.7.22</span><br><span class="line">  GitCommit:        7f7fdf5fed64eb6a7caf99b3e12efcf9d60e311c</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.14</span><br><span class="line">  GitCommit:        v1.1.14-0-g2c9f560</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker compose version</span></span><br><span class="line">Docker Compose version v2.29.7</span><br></pre></td></tr></table></figure><p>参考：<a href="https://u.sb/debian-install-docker/">Debian 12 &#x2F; Ubuntu 24.04 安装 Docker 以及 Docker Compose 教程</a></p><h3 id="创建-docker-compose-yaml"><a href="#创建-docker-compose-yaml" class="headerlink" title="创建 docker-compose.yaml"></a>创建 docker-compose.yaml</h3><p>使用 <code>docker compose</code> 管理 Docker 项目不必去记复杂的 docker run 命令，并且可以把不同的项目放在一起管理，更加的方便。 </p><p>首先选择一个合适的地方比如 <code>/root/docker-project/</code> 在其中创建项目文件夹，在项目文件夹中创建 <code>docker-compose.yaml</code> 。</p><p>然后填写下面的内容  </p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">easyimage:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ddsderek/easyimage:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">easyimage</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8080:80&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=false</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;/root/data/docker_data/easyimage/config:/app/web/config&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;/root/data/docker_data/easyimage/i:/app/web/i&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><p>在 <code>docker-compose.yaml</code> 的配置中，<code>:</code> 前面对应主机，后面对应 docker 容器。  </p><div class="note info modern"><p>docker compose 的命令需要在 <code>docker-compose.yaml</code> 同目录下运行</p></div><p>在这个配置中，我们将使用 <code>http://服务器ip:8080</code> 访问项目，实际数据存储于服务器的 <code>/root/data/docker_data/easyimage</code> 目录下。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>首先使用下面的命令拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose pull</span><br></pre></td></tr></table></figure><p>然后启动镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker compose up -d</span></span><br><span class="line">[+] Running 2/2</span><br><span class="line"> ✔ Network easyimages_default  Created                                                                            </span><br><span class="line"> ✔ Container easyimage         Starte</span><br></pre></td></tr></table></figure><p>没有报错就表示成功启动，访问 <code>http://服务器ip:8080</code> 即可显示 <strong>EasyIamge 2.0 安装环境检测</strong> ，可以点击下一步继续<br><img src="http://i.nep.me/i/2024/12/13/3mm233.webp" alt="docker-easyimages-install-check"></p><p>不过如果我们拥有域名，且希望设置 Nginx 反代，可以先终止 docker 项目，进行 Nginx 的设置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br></pre></td></tr></table></figure><h3 id="设置-Nginx-反代"><a href="#设置-Nginx-反代" class="headerlink" title="设置 Nginx 反代"></a>设置 Nginx 反代</h3><p>推荐使用 Nginx Proxy Manager 进行设置，或是手动填写配置文件的反代部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /</span><br><span class="line">    &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line"></span><br><span class="line">        set $connection_upgrade &#x27;&#x27;;</span><br><span class="line">        if ($http_upgrade) &#123;</span><br><span class="line">            set $connection_upgrade &#x27;upgrade&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        # 上传文件大小限制</span><br><span class="line">        client_max_body_size 10m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试并重载 Nginx 配置 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>然后我们可以将 <code>docker-compose.yaml</code> 中的端口部分修改如下，不再将 8080 暴露在公网。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:8080:80&#x27;</span></span><br></pre></td></tr></table></figure><p>重新启动镜像，访问 <code>https://你的域名</code> 在进行设置。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>点击下一步， 在 <strong>EasyIamge 2.0 网站基础配置</strong> </p><ul><li>设置域名网站域名记得改为 <code>https://</code></li><li>设置管理账号，<strong>修改为自己想用的账户密码</strong><br><img src="https://img.nep.me/i/2024/12/13/3r6n2e.webp" alt="docker-easyimages-install-config"></li></ul><p>设置完成后会跳转到登陆界面，即可登陆账户。</p><p><img src="https://img.nep.me/i/2024/12/13/3vdqut.webp" alt="docker-easyimages-login"></p><h2 id="设置调整"><a href="#设置调整" class="headerlink" title="设置调整"></a>设置调整</h2><p>由于我们是个人使用，可以进行一些安全调整，前往 <strong>设置</strong> 调整下面内容</p><ul><li><strong>图床安全</strong> &gt; 开启 <strong>登陆上传</strong> 与 <strong>验证码</strong></li><li><strong>API设置</strong> &gt; 禁用已有 Token ，如果需要添加一个新的。</li></ul><p><img src="https://img.nep.me/i/2024/12/13/56enwr.webp" alt="docker-easyimages-safe"></p><p>节省存储空间可以在 <strong>上传设置</strong> 中将 <strong>上传图片格式转换</strong> 设置为 <code>WEBP</code>，现在 webp 已足够流行，不必担心兼容问题。 </p><h2 id="配合-PicGo-上传"><a href="#配合-PicGo-上传" class="headerlink" title="配合 PicGo 上传"></a>配合 PicGo 上传</h2><p>上传时每次打开网页也比较麻烦，EasyImages 支持 API 上传，因此可以安装 PicGo</p><h3 id="开启-API-上传功能"><a href="#开启-API-上传功能" class="headerlink" title="开启 API 上传功能"></a>开启 API 上传功能</h3><p>登录图床后台 &gt; <strong>图床安全</strong> &gt; <strong>高级设置</strong> &gt; <strong>开启API上传</strong></p><h3 id="下载-PicGo"><a href="#下载-PicGo" class="headerlink" title="下载 PicGo"></a>下载 PicGo</h3><p>访问 <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> 下载</p><p>macOS 打开时提示损坏，打开终端执行下面的命令，回车后输入电脑账户密码授权</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> xattr -d com.apple.quarantine /Applications/PicGo.app/</span><br></pre></td></tr></table></figure><h3 id="安装-web-uploader-插件"><a href="#安装-web-uploader-插件" class="headerlink" title="安装 web-uploader 插件"></a>安装 web-uploader 插件</h3><p>参考 <a href="https://github.com/icret/EasyImages2.0/blob/master/docs/%E4%BD%BF%E7%94%A8PicGo%E4%B8%8A%E4%BC%A0.md">使用PicGo上传.md</a></p><p>打开 PicGo ，插件设置搜索 <code>web-uploader</code>，安装第一个<br><img src="https://img.nep.me/i/2024/12/13/5kdmyw.webp" alt="docker-easyimage-picgo-search-plugin"></p><p>点击左侧图床设置，找到自定义Web图床，添加一个。  </p><p>配置页面：</p><ul><li><strong>图床配置名</strong>：取个名字</li><li><strong>API地址</strong>：图床后台 &gt; <strong>设置</strong> &gt; <strong>API设置</strong> 页面获取</li><li><strong>POST参数名</strong>：<code>image</code></li><li><strong>JSON路径</strong>：<code>url</code></li><li>自定义请求头： 留空不填</li><li><strong>自定义Body</strong>： <code>&#123;&quot;token&quot;:&quot;your token&quot;&#125;</code> token 在图床后台 &gt; <strong>设置</strong> &gt; <strong>API设置</strong> 页面获取</li></ul><p><img src="https://img.nep.me/i/2024/12/13/6u87f6-2.webp" alt="docker-easyimage-picgo-config"></p><p>然后返回上传区，图片上传选择刚刚添加自定义图传，就可以使用 PicGo 上传了。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>EasyImage 简单易用，无需数据库，配置要求与资源占用都非常低，非常适合拿来当作个人图床。 </p><p>不过正是由于没有数据库，无法保存文件名称（可以在设置中打开日志记录）以及设置相册分组。</p><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><h3 id="Nginx-413-上传失败"><a href="#Nginx-413-上传失败" class="headerlink" title="Nginx 413 上传失败"></a>Nginx 413 上传失败</h3><p>如果上传失败，浏览器 Console 信息提示 413 ,可以在 Nginx 反代设置中，调整大小限制。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size 10m;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="删除图片"><a href="#删除图片" class="headerlink" title="删除图片"></a>删除图片</h3><p>登录图床后台 &gt; <strong>文件管理</strong> &gt; <strong>删除文件</strong> &gt; <strong>删除单张图片</strong> 可以通过图片链接快速删除特定图片。  </p><p>或是使用文件管理进行删除。 </p><h3 id="未来的备份与迁移"><a href="#未来的备份与迁移" class="headerlink" title="未来的备份与迁移"></a>未来的备份与迁移</h3><p>如果未来需要更换机器或是不再使用 EasyImage ，只需备份网站配置 <code>/i/</code> 的中文件夹即可，所有的图片都存放在这里。</p><h3 id="后台与图片使用不同的域名"><a href="#后台与图片使用不同的域名" class="headerlink" title="后台与图片使用不同的域名"></a>后台与图片使用不同的域名</h3><p>由于 EasyImage 的图片是本地文件存储的，在网站的设置中，我们可以为很简单的为 网站 和 图片 指定不同的域名，比如：</p><ul><li><strong>网站域名</strong>： <code>https://upload.example.com</code></li><li><strong>图片域名</strong>： <code>https://img.example.com</code></li></ul><p>此时我们可以在 <code>docker-compose.yaml</code> 中将目录映射修改为下面的形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;/var/www/img.example.com/config:/app/web/config&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;/var/www/img.example.com/i:/app/web/i&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在主机中的 Nginx 中将 <code>https://img.example.com</code> 的 root 目录设置为 <code>/var/www/img.example.com</code> 就可以了 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> img.example.com;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://img.example.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/img.example.com;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> img.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssl config</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 禁止访问 /config 路径，或直接将 config 的映射设置为其他的路径</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* /config</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;我们有时需要上传一些图片用于个人博客，或是其他项目分享，如果你也像我一样更加希望图片存放在自己的服务器上而不是第三方平台上，那么推荐搭建一个</summary>
      
    
    
    
    <category term="教程" scheme="http://ooo.run/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Docker" scheme="http://ooo.run/tags/Docker/"/>
    
    <category term="Docker Compose" scheme="http://ooo.run/tags/Docker-Compose/"/>
    
    <category term="EasyImage" scheme="http://ooo.run/tags/EasyImage/"/>
    
    <category term="图床" scheme="http://ooo.run/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>如何安装 Node.js</title>
    <link href="http://ooo.run/post/how-to-install-nodejs.html"/>
    <id>http://ooo.run/post/how-to-install-nodejs.html</id>
    <published>2024-12-12T09:40:16.000Z</published>
    <updated>2024-12-14T16:21:55.489Z</updated>
    
    <content type="html"><![CDATA[<p>本文将带介绍如何在电脑上安装 Node.js 运行环境，从而可以使用丰富的应用 Nodejs 程序。 </p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Windows</button><button type="button" class="tab">macOS</button></div><div class="tab-contents"><div class="tab-item-content active"><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>测试安装环境为 <code>Windows 11</code></p><h3 id="下载-Node-js"><a href="#下载-Node-js" class="headerlink" title="下载 Node.js"></a>下载 Node.js</h3><p>访问 Node.js 的官方网站的 <a href="https://nodejs.org/zh-cn/download/prebuilt-installer">下载页面</a> 下载安装包。 </p><p>我们选择 <strong>预构建安装程序</strong> ，选择一下自己的系统与 CPU 架构类型， Windows 一般选择 <strong>x64</strong>，再选择 Node.js 版本。</p><div class="note info modern"><p>推荐选择版本号为偶数的 LTS 版本</p></div>  <p><img src="https://img.nep.me/i/2024/12/13/7fzq5m-2.webp" alt="nodejs-home-page"></p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>然后打开安装程序 <code>node-v22.12.0-x64.msi</code>，安装过程没有陷阱，我们 <strong>同意</strong> 协议后，一路点击 Next 即可。  </p><p><img src="https://img.nep.me/i/2024/12/13/7hc7pi-2.webp" alt="nodejs-setup"></p><p>安装完成后，打开终端程序：</p><ul><li>右键点击开始菜单，选择终端</li><li>或是按 <code>Windows + R</code> 快捷键打开 <strong>运行</strong> 窗口，输入 <code>cmd</code> ，回车打开</li><li>或是在资源管理器的地址栏中输入 <code>cmd</code> 回车打开（终端的运行目录将是资源管理器所在的目录）</li></ul><p>运行下面的命令测试安装结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果可以成功输出版本号，表示安装成功。  </p><p><img src="https://img.nep.me/i/2024/12/13/7ilvge-2.webp" alt="nodejs-install-done"></p></div><div class="tab-item-content"><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>测试安装环境为 <code>macOS 15.1</code> ，macOS 更推荐使用 **包管理器 <code>Homebrew</code> 进行安装。</p><blockquote><p><a href="https://brew.sh/zh-cn/">Homebrew</a> 是 macOS 和 Linux 缺失软件包的管理器，用于安装 Apple没有预装但你需要的东西。</p></blockquote><p>安装需要使用终端，<a href="https://support.apple.com/zh-cn/guide/terminal/apd5265185d-f365-44cb-8b09-71a064a42125/mac">在 Mac 上打开或退出“终端”</a>：</p><ul><li>启动台 &gt; 其他 &gt; 终端</li><li><strong>启动台</strong> 或是　<code>Commond⌘ + 空格</code> 打开聚焦搜索，搜索 <strong>终端</strong> 或是 <strong>Terminal</strong></li></ul><h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><p>中国大陆地区或是更详细步骤请查看：<a href="https://ooo.run/post/how-to-install-homebrew-on-macos.html" target="_blank">如何在 macOS 中安装 Homebrew</a></p><p>首先复制安装命令  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>在终端内执行安装命令，安装时需要输入你的电脑密码进行授权：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Checking <span class="keyword">for</span> `<span class="built_in">sudo</span>` access (<span class="built_in">which</span> may request your password)...</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure><p>brew 会提示将安装的软件以及创建的文件夹，按回车继续，等待下载和安装完成。</p><p>命令执行结束后按照提示复制执行下面的三条命令添加 PATH :</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> &gt;&gt; /Users/me/.zprofile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; /Users/me/.zprofile</span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(/opt/homebrew/bin/brew shellenv)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>如果使用了 <code>oh-my-zsh</code> ，需要执行下面的命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/opt/homebrew/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc   </span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后可以执行 <code>brew -v</code> 测试安装结果，成功会显示 Hombrew 的版本号。   </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;brew -v</span><br><span class="line">Homebrew 4.4.11</span><br></pre></td></tr></table></figure><h3 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h3><p>打开终端，执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;node -v</span><br><span class="line">v23.4.0</span><br><span class="line"></span><br><span class="line">&gt;npm -v</span><br><span class="line">10.9.2</span><br></pre></td></tr></table></figure><h3 id="brew-常用命令"><a href="#brew-常用命令" class="headerlink" title="brew 常用命令"></a>brew 常用命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">brew install node@22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">brew remove node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装软件</span></span><br><span class="line">brew list </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查更新</span></span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载更新</span></span><br><span class="line">brew upgrade</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h3><div class="note info modern"><p>中国大陆用户可以使用下面的命令切换使用淘宝的镜像源，加速下载</p></div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>查看当前的镜像源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将带介绍如何在电脑上安装 Node.js 运行环境，从而可以使用丰富的应用 Nodejs 程序。 &lt;/p&gt;
&lt;div class=&quot;tabs&quot;&gt;&lt;div class=&quot;nav-tabs&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;tab active&quot;&gt;</summary>
      
    
    
    
    <category term="教程" scheme="http://ooo.run/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="http://ooo.run/tags/Linux/"/>
    
    <category term="macOS" scheme="http://ooo.run/tags/macOS/"/>
    
    <category term="Nodejs" scheme="http://ooo.run/tags/Nodejs/"/>
    
    <category term="Windows" scheme="http://ooo.run/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo + GitHub 建立个人博客</title>
    <link href="http://ooo.run/post/start-blog-with-hexo-and-github.html"/>
    <id>http://ooo.run/post/start-blog-with-hexo-and-github.html</id>
    <published>2024-12-11T09:30:00.000Z</published>
    <updated>2024-12-14T16:29:51.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎来到我的世界！这里是 Mr. O。你是否也有过这样的想法：拥有一个属于自己的博客，记录生活的点滴、分享自己的经验或者展示你的专业技能？</p><p>其实，搭建一个个人博客并不像想象的那么复杂。借助 GitHub 提供的免费托管服务，以及功能强大、简单易用的 Hexo 静态博客框架，我么可以轻松打造一个属于自己的博客平台。而且，这个过程完全免费！</p><p>在本文中，我将带你一步步了解如何利用 GitHub Pages 和 Hexo 快速部署一个美观、实用的个人博客，让你的思想在网络世界自由驰骋。</p><p>让我们开始吧！</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p><a href="(https://hexo.io">Hexo</a> 是一个快速、简洁且高效的博客框架，支持丰富的 <a href="https://hexo.io/themes/">主题</a> ，我们只需要使用 Markdown 语法编写文章，Hexo 将为我们生成网站的文件。     </p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/">GitHub</a> 是全球最大的代码托管网站和开源社区，我们可以使用 GitHub 免费的 <a href="https://pages.github.com/">Pages</a> 服务托管我们的博客。  </p><p>如果你还没有 Github 账户，可以免费注册一个： <a href="https://github.com/signup">https://github.com/signup</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>拥有了 GitHub 账户之后，我们需要在电脑上安装下面的软件</p><ul><li>安装 <a href="https://nodejs.org/zh-cn/download/package-manager">Node.js</a> ：查看 <a href="https://ooo.run/post/how-to-install-nodejs.html">如何安装 Node.js</a></li><li>安装 <a href="https://git-scm.com/downloads">git</a><ul><li>Windows 下载安装包进行安装</li><li>macOS 安装 Homebrew 时会自动安装</li></ul></li><li>一个文本编辑器，推荐安装 <a href="https://code.visualstudio.com/">Visual Studio Code</a></li></ul><p>安装完成后打开终端程序，可以通过查询版本命令确认是否完成安装。 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm -v</span><br><span class="line">10.9.2</span><br><span class="line"></span><br><span class="line">&gt; git -v</span><br><span class="line">git version 2.47.0</span><br></pre></td></tr></table></figure><div class="note info modern"><p><strong>如何打开终端</strong>：</p><p>使用 <strong>VS Code</strong> ，可以按 Ctrl + ` (Esc 下面的按键) 快捷键在底部打开终端程序。<br>也可以使用菜单 <strong>终端</strong> &gt; <strong>打开终端</strong></p></div><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>我们需要在终端内使用 <code>npm</code> 命令安装我们的 Hexo 博客：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>执行结束后，再执行 <code>hexo -v</code>  命令，如果成功输出版本信息则表示安装成功：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo -v</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: darwin 24.1.0 15.1.1</span><br><span class="line">node: 23.3.0</span><br><span class="line">acorn: 8.14.0</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>然后创建一个空文件夹用于存放博客文件，创建后使用 VS Code 选择 <code>打开文件夹</code> 打开它，再打开 VS Code 的终端，依次运行下面的命令</p><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>此时可以查看 VS Code 侧边栏，已自动生成了很多文件，一般我们只需要关注 <code>source</code> 中的内容，其中 <code>_posts</code> 是我们存放博客文章的地方。<br><img src="https://img.nep.me/i/2024/12/13/p5boqx-2.webp" alt="VS Code Sidebar">  </p><h3 id="预览博客"><a href="#预览博客" class="headerlink" title="预览博客"></a>预览博客</h3><p>使用 <code>hexo s</code> 命令可以在电脑本地预览网站效果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo s</span><br><span class="line"><span class="comment"># 如果输出下面内容就表示成功了</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>然后我们就可以打开浏览器，访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可查看网站预览。  </p><p><img src="https://img.nep.me/i/2024/12/13/bp3m0l-2.webp" alt="Hexo Preview"></p><div class="note info modern"><p><code>hexo s</code>  是 <code>hexo server</code> 的简短形式，更加方便</p></div> <div class="note info modern"><p>Windows 按住 <code>Ctrl</code> , macOS 按住 <code>Commond⌘</code> 点击终端内链接可以快速打开</p></div> <div class="note warning modern"><p>不需要时后按 <code>Ctrl + C</code> 结束进程</p></div> <h3 id="设置博客信息"><a href="#设置博客信息" class="headerlink" title="设置博客信息"></a>设置博客信息</h3><p>我们需要编辑根目录下的 <code>_config.yml</code> 文件设置我们自己的站点信息</p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="comment">## title 是站点的名称</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#x27;O’s World&#x27;</span></span><br><span class="line"><span class="comment">## subtitle 副标题，一般会显示在站点名称的下面</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;Mr. O 的分享小站，分享有趣的事情&#x27;</span></span><br><span class="line"><span class="comment">## description 描述站点的内容</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;探索互联网世界，分享实用教程与精彩内容，发现更多有趣之处。&#x27;</span></span><br><span class="line"><span class="comment">## keywords 是站点的关键词，用于搜索引擎的 SEO 优化，填写几个单词，告诉搜索引擎一些信息。</span></span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="comment">## author 是作者的名称，一般使用自己的昵称</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Mr.</span> <span class="string">O</span></span><br><span class="line"><span class="comment">## 站点的语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment">## timezone 是时区，如果只在电脑上编辑文件，不需要填写， Hexo 会根据本地电脑的时间生成</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## url 是设置站点的域名，可以使用 github 提供的 &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://ooo.run</span></span><br><span class="line"><span class="comment">## permalink 是网站文章的链接格式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:title.html</span></span><br></pre></td></tr></table></figure><p><code>permalink</code> 指的是文章的 url 格式，我喜欢使用 <code>post/:title.html</code> 比较简洁，其中 <code>:title</code> 指的是文件名称。 </p><img src="https://img.nep.me/i/2024/12/13/8t0d4s-2.webp" style="width:50%;" alt="hexo url preview"><p>默认的是 <code>:year/:month/:day/:title/</code> 会自动添加发布日期信息。  </p><img src="https://img.nep.me/i/2024/12/13/8t2ul8-2.webp" style="width:50%;" alt="hexo url preview"><div class="note warning modern"><p>编辑 yml 格式文件时，<code>:</code> 后面需要根一个空格，否则会报错，内容可以使用单引号包裹。</p></div> <p>编辑后可以重新执行 <code>hexo s</code> 进行预览。 </p><h3 id="添加主题-Butterfly"><a href="#添加主题-Butterfly" class="headerlink" title="添加主题(Butterfly)"></a>添加主题(Butterfly)</h3><p>Hexo 支持很多主题，下面将使用并设置的是 <a href="https://butterfly.js.org/">Butterfly</a> 主题。</p><p>先安装一下所需的依赖</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">npm</button><button type="button" class="tab">pnpm</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-util moment-timezone hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-util moment-timezone hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>打开终端，在博客目录下执行下面的命令下载主题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>然后编辑博客目录下 <code>_config.yml</code> 文件，将底部的主题设置 <code>theme: landscape</code> 修改为 <code>butterfly</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>运行 <code>hexo s</code> 预览主题效果。</p><p>为了避免主题未来更新覆盖了我们自定义的配置，可以复制一下主题的配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> themes/butterfly/_config.yml _config.butterfly.yml</span><br></pre></td></tr></table></figure><p>然后我们就可以在博客目录下面的 <code>_config.butterfly.yml</code> 对主题进行自定义设置，可以修改一些功能以及设置导航菜单。</p><p>有关主题配置文件选项的中文标注可以查看 <a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 文档(三) 主题配置</a></p><h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><p>我们可以使用命令 <code>hexo n postname</code> 创建一个新的文章，这个命令等同于</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post postname</span><br></pre></td></tr></table></figure><p>这会在 <code>source/_post</code> 文件夹下面创建一个名称为 <code>postname.md</code> 的文件。  </p><p>我们可以使用 VS Code 编辑这个文件，文章使用 Markdown 语法，打开这个文件后我们可以看到已自动填充了一些内容。   </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">postname</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-12-11 22:30:38</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p><code>title</code> 是现实的文章标题名称，<code>date</code> 是发布日期，<code>tags</code> 是文章的标签，这都是可以修改的，我们还可以添加更多的信息，比如分类和主图。 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 必须部分</span></span><br><span class="line"><span class="comment"># 文章名称</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">一个文章</span></span><br><span class="line"><span class="comment"># 发布日期</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-12-11 22:30:38</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面可选的</span></span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="comment"># 分类</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">教程</span></span><br><span class="line"><span class="comment"># 关闭评论（默认是开启，可以不写）</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 适用于 Butterfly 主题</span></span><br><span class="line"><span class="comment"># 缩略图</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">&#x27;https://arina.loli.net/2024/11/23/D3zqLFyGStUWQHZ.png&#x27;</span></span><br><span class="line"><span class="comment"># 顶部图片</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">&#x27;https://arina.loli.net/2024/11/23/D3zqLFyGStUWQHZ.png&#x27;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment"># 文章部分</span></span><br></pre></td></tr></table></figure><p>在 <code>---</code> 下面，我们可以使用 Markdown 语法编写我们的文章。</p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>有时我们需要在图片中插入图片，我们只需要将图片放入 Hexo 目录中的 source 文件夹中，非常推荐单独建立一个文件夹比如 <code>images</code> 来存放图片。  </p><p>假设我们有两张图片 1.png 与 2.png，此时文件目录是下面的样子 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source/</span><br><span class="line">└── images/</span><br><span class="line">    ├── 1.png</span><br><span class="line">    └── 2.png</span><br></pre></td></tr></table></figure><p>我们在文章中引用时，只需要使用下面的 Markdown 语法就可以了，路径以 <code>/</code> 开头，没有 <code>source</code>：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">/images/1.png</span>)</span><br><span class="line">![<span class="string">2.png</span>](<span class="link">/images/2.png</span>)</span><br></pre></td></tr></table></figure><p>虽然 VS Code 无法正常预览图片，但是通过 <code>hexo s</code> 在浏览器内预览就是正常的了。  </p><h3 id="添加一些页面（Pages）"><a href="#添加一些页面（Pages）" class="headerlink" title="添加一些页面（Pages）"></a>添加一些页面（Pages）</h3><p>除了文章之外，我们还需要添加一些页面（Pages）：</p><h4 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h4><p>在 Hexo 的根目录运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>会生成 <code>source/tags/index.md</code>，编辑这个文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-12-13 07:55:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&#x27;tags&#x27;</span></span><br><span class="line"><span class="attr">orderby:</span> <span class="string">random</span></span><br><span class="line"><span class="attr">order:</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>就可以通过 <a href="http://localhost:4000/tags/">http://localhost:4000/tags/</a> 或是 <code>https://你的域名/tags</code> 进行访问</p><h4 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h4><p>在 Hexo 的根目录运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">```  </span><br><span class="line">会生成 `<span class="built_in">source</span>/categories/index.md`，编辑这个文件</span><br><span class="line"></span><br><span class="line">```yml</span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line"><span class="built_in">date</span>: 2024-12-13 07:00:00</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&#x27;categories&#x27;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><p>在 Hexo 的根目录运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">```  </span><br><span class="line">会生成 `<span class="built_in">source</span>/about/index.md`，编辑这个文件</span><br><span class="line"></span><br><span class="line">```yml</span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line"><span class="built_in">date</span>: 2024-12-13 07:00:00</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 Markdown 或是 HTML 格式编写内容 </span></span><br></pre></td></tr></table></figure><p>about 不是 Hexo 内置页面类型，不需要添加 <code>types:</code> 但是需要我们自己以 Markdown 或是 HTML 格式编写一些自我介绍。  </p><h4 id="将页面添加至导航"><a href="#将页面添加至导航" class="headerlink" title="将页面添加至导航"></a>将页面添加至导航</h4><p>编辑主题的配置文件 <code>_config.butterfly.yml</code>，修改 <code>menu</code> 部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: / || fas fa-home</span><br><span class="line">  分类: /categories/ || fas fa-archive</span><br><span class="line">  标签: /tags/ || fas fa-tag</span><br><span class="line">  关于: /about/ || fas fa-user</span><br><span class="line">  友情链接: /link/ || fas fa-link</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>修改主题配置文件， <code>hexo s</code> 命令无法及时刷新预览，需要 Ctrl + C 终止后重新运行</p></div><p>保存后运行 <code>hexo s</code> 即可在右上角看到菜单。  </p><h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><p>我们已经完成了主设置，并创建了新的文章，现在我们将把博客托管到 GitHub Pages 上，从而从网络上访问。</p><p>访问 <a href="https://github.com/new">https://github.com/new</a> 创建一个新的仓库，<code>Repository name</code> 必须是 <code>&lt;username&gt;.github.io</code>，否则不会生效。</p><p>然后打开终端，安装 <code>hexo-deployer-git</code> </p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">npm</button><button type="button" class="tab">pnpm</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-deployer-git</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>然后编辑博客目录下的 <code>_config.yml</code> 文件，设置底部的 deploy 部分。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># 仓库地址</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><h3 id="添加-SSH-Key-到-GitHub"><a href="#添加-SSH-Key-到-GitHub" class="headerlink" title="添加 SSH Key 到 GitHub"></a>添加 SSH Key 到 GitHub</h3><p>查看 <a href="https://ooo.run/post/how-to-add-ssh-key-to-github.html">如何使用 SSH key 连接 GitHub</a></p><p>然后运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>即可将网站推送到 GitHub 上。  </p><h3 id="设置-GitHub-Pages"><a href="#设置-GitHub-Pages" class="headerlink" title="设置 GitHub Pages"></a>设置 GitHub Pages</h3><p>在 GitHub 仓库的网页上，点击顶部 <strong>Settings</strong>，左侧找到 <strong>Pages</strong> ，编辑 <strong>Branch</strong> 部分，设置为 <code>gh-pages</code> + <code>/(root)</code> 点击 <strong>Save</strong> 保存。</p><p><img src="https://img.nep.me/i/2024/12/13/8tl89y-2.webp" alt="gh-page-settings"></p><p>然后就可以访问 <code>https://&lt;username&gt;.github.io</code> 查看网站，如果显示 404 可以稍微等几分钟。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>如果你拥有一个属于自己的域名，那么除了使用 GitHub 提供的免费二级域名之外，我们还可以设置使用自己的域名访问博客。  </p><p>如果你还没有域名，推荐前往下面的两个网站购买一个 </p><ul><li><a href="https://www.cloudflare.com/">Cloudflare</a> 承诺以<strong>成本价</strong>销售域名，但是一般没有首年优惠</li><li><a href="https://porkbun.com/">Porkbun</a> 查询结果点击 <code>Show All Extensions</code> &gt; <code>Sort by price</code> ，往往能看到不错的首年优惠<br>通常推荐选择常用的后缀比如 <code>.com</code> 、<code>.me</code> 进行注册。</li></ul><h4 id="绑定至-GitHub"><a href="#绑定至-GitHub" class="headerlink" title="绑定至 GitHub"></a>绑定至 GitHub</h4><p>首先第一步前往域名服务商或是 Cloudflare ，在 <strong>DNS</strong> 设置中添加一条 CNAME 域名记录</p><ul><li>类型为 <code>CNAME</code></li><li>名称主域名填写 <code>@</code> ( 代表 <a href="https://ooo.run/">https://ooo.run</a> )，也可以是 www 或一个其他的子域名</li><li>内容是 <code>username.github.io</code><br><img src="https://img.nep.me/i/2024/12/14/r8178j-2.webp" alt="cloudflare cname"></li></ul><p>第二步访问 GitHub 网站，在仓库的 <code>Settings</code> &gt; <code>Pages</code> &gt; <code>Custon domain</code> 中，填写我们的域名。</p><p><img src="https://img.nep.me/i/2024/12/13/ahmi85-2.webp" alt="github-pages-custom-domain"></p><p>第三步在 source 文件下创建一个 <code>CNAME</code> 文件，文件名是 <strong>大写字母</strong>，没有后缀，内容是我们需要使用的域名。</p><p>最后运行命令将更新推送至 GitHub 就可以了。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>我们就可以通过自己的域名访问博客了。</p><h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p>Hexo 是不带评论系统的，我们需要自己添加，可以使用</p><ul><li>基于 GitHub 的 Giscus </li><li>可以自己部署的 Twikoo 或 Arttalk</li><li>第三方评论系统 Disqus (包含广告)</li></ul><p>具体可以查看 <a href="https://ooo.run/post/how-to-add-comment-system-for-static-blog.html">为 Hexo 博客添加评论系统，Giscus or Twikoo or Arttalk or Disqus</a>  </p><h2 id="使用-GitHub-备份"><a href="#使用-GitHub-备份" class="headerlink" title="使用 GitHub 备份"></a>使用 GitHub 备份</h2><div class="note warning modern"><p>TODO: 设置备份</p></div><h2 id="常用的-Hexo-命令介绍"><a href="#常用的-Hexo-命令介绍" class="headerlink" title="常用的 Hexo 命令介绍"></a>常用的 Hexo 命令介绍</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成站点</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">hexo deploy </span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存，有时遇到一些错误，可以先执行一下 hexo clean</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="给站点添加搜索功能"><a href="#给站点添加搜索功能" class="headerlink" title="给站点添加搜索功能"></a>给站点添加搜索功能</h3><p>在 Hexo 根目录运行</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">npm</button><button type="button" class="tab">pnpm</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>修改站点配置文件 <code>_config.yml</code>，在最后新增</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure><p>修改主题配置文件 <code>_config.butterfly.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">local_search</span></span><br></pre></td></tr></table></figure><p>然后就可以执行搜索了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成站点文件</span></span><br><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启预览</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h3><p>在 Hexo 根目录下执行</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">npm</button><button type="button" class="tab">pnpm</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-generator-sitemap </span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>以后生成站点信息时会自动生成 <code>sitemap.xml</code> 文件，本地 <code>hexo s</code> 预览可以通过 <code>http://localhost:4000/sitemap.xml</code> 访问</p><h3 id="添加-RSS-支持"><a href="#添加-RSS-支持" class="headerlink" title="添加 RSS 支持"></a>添加 RSS 支持</h3><p>在 Hexo 根目录下执行</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">npm</button><button type="button" class="tab">pnpm</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-generator-feed</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>然后编辑 Hexo 根目录下的 <code>_config.yml</code> 文件，在最后添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSS</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="comment"># 限制输出文章数量</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>以后生成站点信息时会自动生成 <code>atom.xml</code> 文件，本地 <code>hexo s</code> 预览可以通过 <code>http://localhost:4000/atom.xml</code> 访问</p><div class="note default morden flat"><p>本地预览 atom.xml 显示乱码？ 不必担心，这是本地服务器的问题，atom.xml 文件其实是正常，推送到服务器后查看就可以了</p></div><h3 id="设置友情链接"><a href="#设置友情链接" class="headerlink" title="设置友情链接"></a>设置友情链接</h3><p>除了 Hexo 内置的几个页面 Type 之外，Butterly 主题还支持设置友情链接页面：<br>在 Hexo 的根目录运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="built_in">link</span></span><br></pre></td></tr></table></figure><p>会生成 <code>source/link/index.md</code>，编辑这个文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-12-13 07:00:05</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&#x27;link&#x27;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>我们还需要在 source 文件夹下创建一个 <code>_data</code> 文件夹，再创建一个 <code>link.yml</code> 文件，按照下面的格式填写链接 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;欢迎来到我的世界！这里是 Mr. O。你是否也有过这样的想法：拥有一个属于自己的博客，记录生活的点滴、分享自己的经验或者展示你的专业技能？&lt;</summary>
      
    
    
    
    <category term="教程" scheme="http://ooo.run/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="http://ooo.run/tags/Hexo/"/>
    
    <category term="GitHub" scheme="http://ooo.run/tags/GitHub/"/>
    
  </entry>
  
</feed>
