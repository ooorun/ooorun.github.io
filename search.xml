<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker 项目，使用 EasyImage 轻松搭建个人图床</title>
    <url>/post/docker-project-easy-images.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我们有时需要上传一些图片用于个人博客，或是其他项目分享，如果你也像我一样更加希望图片存放在自己的服务器上而不是第三方平台上，那么推荐搭建一个属于自己的图床。  </p>
<p>本文将介绍如何使用 Docker 快速部署一个基于 EasyImage 2 的图床服务。 </p>
<h3 id="EasyImage-特点"><a href="#EasyImage-特点" class="headerlink" title="EasyImage 特点"></a>EasyImage 特点</h3><p><strong>EasyImage</strong> 简单强大，无数据库非常适合小服务器。  </p>
<ul>
<li>支持WebP格式转换</li>
<li>支持仅登录后上传</li>
<li>支持设置图片质量</li>
<li>支持文字&#x2F;图片水印</li>
<li>支持设置图片指定宽&#x2F;高</li>
<li>支持上传图片转换为指定格式</li>
<li>支持限制最低宽度&#x2F;高度上传</li>
<li>支持API</li>
<li>在线管理图片</li>
<li>等更多功能</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>本文的命令适用于 Debian 12，并且需要在 root 用户下完成，请使用 <code>sudo -i</code> 或 <code>su root</code> 切换到 root 用户进行操作。</p>
<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>相比于直接安装 Debian 仓库中的 docker，更推荐使用 Docker 官方的源进行安装，并且将安装 <code>docker compose</code> 进行管理 Docker 项目。</p>
<p>首先需要更新和安装软件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade -y</span><br><span class="line">apt install curl vim wget gnupg dpkg apt-transport-https lsb-release ca-certificates</span><br></pre></td></tr></table></figure>

<p>然后加入 Docker 的 GPG 公钥和 apt 源：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sSL https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>中国大陆的机器可以用清华 TUNA 的国内源：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sS https://download.docker.com/linux/debian/gpg | gpg --dearmor &gt; /usr/share/keyrings/docker-ce.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-ce.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian <span class="subst">$(lsb_release -sc)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure>

<p>然后更新系统后即可安装 Docker CE 和 Docker Compose 插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<p>此时可以使用 <code>docker version</code> 命令检查是否安装成功：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           27.3.1</span><br><span class="line"> API version:       1.47</span><br><span class="line"> Go version:        go1.22.7</span><br><span class="line"> Git commit:        ce12230</span><br><span class="line"> Built:             Fri Sep 20 11:41:11 2024</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          27.3.1</span><br><span class="line">  API version:      1.47 (minimum version 1.24)</span><br><span class="line">  Go version:       go1.22.7</span><br><span class="line">  Git commit:       41ca978</span><br><span class="line">  Built:            Fri Sep 20 11:41:11 2024</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.7.22</span><br><span class="line">  GitCommit:        7f7fdf5fed64eb6a7caf99b3e12efcf9d60e311c</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.14</span><br><span class="line">  GitCommit:        v1.1.14-0-g2c9f560</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker compose version</span></span><br><span class="line">Docker Compose version v2.29.7</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://u.sb/debian-install-docker/">Debian 12 &#x2F; Ubuntu 24.04 安装 Docker 以及 Docker Compose 教程</a></p>
<h3 id="创建-docker-compose-yaml"><a href="#创建-docker-compose-yaml" class="headerlink" title="创建 docker-compose.yaml"></a>创建 docker-compose.yaml</h3><p>使用 <code>docker compose</code> 管理 Docker 项目不必去记复杂的 docker run 命令，并且可以把不同的项目放在一起管理，更加的方便。 </p>
<p>首先选择一个合适的地方比如 <code>/root/docker-project/</code> 在其中创建项目文件夹，在项目文件夹中创建 <code>docker-compose.yaml</code> 。</p>
<p>然后填写下面的内容  </p>
<figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">easyimage:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ddsderek/easyimage:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">easyimage</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8080:80&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=false</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;/root/data/docker_data/easyimage/config:/app/web/config&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;/root/data/docker_data/easyimage/i:/app/web/i&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>

<p>在 <code>docker-compose.yaml</code> 的配置中，<code>:</code> 前面对应主机，后面对应 docker 容器。  </p>
<div class="note info modern"><p>docker compose 的命令需要在 <code>docker-compose.yaml</code> 同目录下运行</p>
</div>

<p>在这个配置中，我们将使用 <code>http://服务器ip:8080</code> 访问项目，实际数据存储于服务器的 <code>/root/data/docker_data/easyimage</code> 目录下。</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>首先使用下面的命令拉取镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker compose pull</span><br></pre></td></tr></table></figure>
<p>然后启动镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@debian ~ <span class="comment"># docker compose up -d</span></span><br><span class="line">[+] Running 2/2</span><br><span class="line"> ✔ Network easyimages_default  Created                                                                            </span><br><span class="line"> ✔ Container easyimage         Starte</span><br></pre></td></tr></table></figure>
<p>没有报错就表示成功启动，访问 <code>http://服务器ip:8080</code> 即可显示 <strong>EasyIamge 2.0 安装环境检测</strong> ，可以点击下一步继续<br><img src="http://i.nep.me/i/2024/12/13/3mm233.webp" alt="docker-easyimages-install-check"></p>
<p>不过如果我们拥有域名，且希望设置 Nginx 反代，可以先终止 docker 项目，进行 Nginx 的设置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker compose down</span><br></pre></td></tr></table></figure>

<h3 id="设置-Nginx-反代"><a href="#设置-Nginx-反代" class="headerlink" title="设置 Nginx 反代"></a>设置 Nginx 反代</h3><p>推荐使用 Nginx Proxy Manager 进行设置，或是手动填写配置文件的反代部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ^~ /</span><br><span class="line">    &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line"></span><br><span class="line">        set $connection_upgrade &#x27;&#x27;;</span><br><span class="line">        if ($http_upgrade) &#123;</span><br><span class="line">            set $connection_upgrade &#x27;upgrade&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        # 上传文件大小限制</span><br><span class="line">        client_max_body_size 10m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>测试并重载 Nginx 配置 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>然后我们可以将 <code>docker-compose.yaml</code> 中的端口部分修改如下，不再将 8080 暴露在公网。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:8080:80&#x27;</span></span><br></pre></td></tr></table></figure>

<p>重新启动镜像，访问 <code>https://你的域名</code> 在进行设置。 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<p>点击下一步， 在 <strong>EasyIamge 2.0 网站基础配置</strong> </p>
<ul>
<li>设置域名网站域名记得改为 <code>https://</code></li>
<li>设置管理账号，<strong>修改为自己想用的账户密码</strong><br><img src="https://img.nep.me/i/2024/12/13/3r6n2e.webp" alt="docker-easyimages-install-config"></li>
</ul>
<p>设置完成后会跳转到登陆界面，即可登陆账户。</p>
<p><img src="https://img.nep.me/i/2024/12/13/3vdqut.webp" alt="docker-easyimages-login"></p>
<h2 id="设置调整"><a href="#设置调整" class="headerlink" title="设置调整"></a>设置调整</h2><p>由于我们是个人使用，可以进行一些安全调整，前往 <strong>设置</strong> 调整下面内容</p>
<ul>
<li><strong>图床安全</strong> &gt; 开启 <strong>登陆上传</strong> 与 <strong>验证码</strong></li>
<li><strong>API设置</strong> &gt; 禁用已有 Token ，如果需要添加一个新的。</li>
</ul>
<p><img src="https://img.nep.me/i/2024/12/13/56enwr.webp" alt="docker-easyimages-safe"></p>
<p>节省存储空间可以在 <strong>上传设置</strong> 中将 <strong>上传图片格式转换</strong> 设置为 <code>WEBP</code>，现在 webp 已足够流行，不必担心兼容问题。 </p>
<h2 id="配合-PicGo-上传"><a href="#配合-PicGo-上传" class="headerlink" title="配合 PicGo 上传"></a>配合 PicGo 上传</h2><p>上传时每次打开网页也比较麻烦，EasyImages 支持 API 上传，因此可以安装 PicGo</p>
<h3 id="开启-API-上传功能"><a href="#开启-API-上传功能" class="headerlink" title="开启 API 上传功能"></a>开启 API 上传功能</h3><p>登录图床后台 &gt; <strong>图床安全</strong> &gt; <strong>高级设置</strong> &gt; <strong>开启API上传</strong></p>
<h3 id="下载-PicGo"><a href="#下载-PicGo" class="headerlink" title="下载 PicGo"></a>下载 PicGo</h3><p>访问 <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> 下载</p>
<p>macOS 打开时提示损坏，打开终端执行下面的命令，回车后输入电脑账户密码授权</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> xattr -d com.apple.quarantine /Applications/PicGo.app/</span><br></pre></td></tr></table></figure>

<h3 id="安装-web-uploader-插件"><a href="#安装-web-uploader-插件" class="headerlink" title="安装 web-uploader 插件"></a>安装 web-uploader 插件</h3><p>参考 <a href="https://github.com/icret/EasyImages2.0/blob/master/docs/%E4%BD%BF%E7%94%A8PicGo%E4%B8%8A%E4%BC%A0.md">使用PicGo上传.md</a></p>
<p>打开 PicGo ，插件设置搜索 <code>web-uploader</code>，安装第一个<br><img src="https://img.nep.me/i/2024/12/13/5kdmyw.webp" alt="docker-easyimage-picgo-search-plugin"></p>
<p>点击左侧图床设置，找到自定义Web图床，添加一个。  </p>
<p>配置页面：</p>
<ul>
<li><strong>图床配置名</strong>：取个名字</li>
<li><strong>API地址</strong>：图床后台 &gt; <strong>设置</strong> &gt; <strong>API设置</strong> 页面获取</li>
<li><strong>POST参数名</strong>：<code>image</code></li>
<li><strong>JSON路径</strong>：<code>url</code></li>
<li>自定义请求头： 留空不填</li>
<li><strong>自定义Body</strong>： <code>&#123;&quot;token&quot;:&quot;your token&quot;&#125;</code> token 在图床后台 &gt; <strong>设置</strong> &gt; <strong>API设置</strong> 页面获取</li>
</ul>
<p><img src="https://img.nep.me/i/2024/12/13/6u87f6-2.webp" alt="docker-easyimage-picgo-config"></p>
<p>然后返回上传区，图片上传选择刚刚添加自定义图传，就可以使用 PicGo 上传了。  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>EasyImage 简单易用，无需数据库，配置要求与资源占用都非常低，非常适合拿来当作个人图床。 </p>
<p>不过正是由于没有数据库，无法保存文件名称（可以在设置中打开日志记录）以及设置相册分组。</p>
<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><h3 id="Nginx-413-上传失败"><a href="#Nginx-413-上传失败" class="headerlink" title="Nginx 413 上传失败"></a>Nginx 413 上传失败</h3><p>如果上传失败，浏览器 Console 信息提示 413 ,可以在 Nginx 反代设置中，调整大小限制。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client_max_body_size 10m;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="删除图片"><a href="#删除图片" class="headerlink" title="删除图片"></a>删除图片</h3><p>登录图床后台 &gt; <strong>文件管理</strong> &gt; <strong>删除文件</strong> &gt; <strong>删除单张图片</strong> 可以通过图片链接快速删除特定图片。  </p>
<p>或是使用文件管理进行删除。 </p>
<h3 id="未来的备份与迁移"><a href="#未来的备份与迁移" class="headerlink" title="未来的备份与迁移"></a>未来的备份与迁移</h3><p>如果未来需要更换机器或是不再使用 EasyImage ，只需备份网站配置 <code>/i/</code> 的中文件夹即可，所有的图片都存放在这里。</p>
<h3 id="后台与图片使用不同的域名"><a href="#后台与图片使用不同的域名" class="headerlink" title="后台与图片使用不同的域名"></a>后台与图片使用不同的域名</h3><p>由于 EasyImage 的图片是本地文件存储的，在网站的设置中，我们可以为很简单的为 网站 和 图片 指定不同的域名，比如：</p>
<ul>
<li><strong>网站域名</strong>： <code>https://upload.example.com</code></li>
<li><strong>图片域名</strong>： <code>https://img.example.com</code></li>
</ul>
<p>此时我们可以在 <code>docker-compose.yaml</code> 中将目录映射修改为下面的形式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;/var/www/img.example.com/config:/app/web/config&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;/var/www/img.example.com/i:/app/web/i&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后在主机中的 Nginx 中将 <code>https://img.example.com</code> 的 root 目录设置为 <code>/var/www/img.example.com</code> 就可以了 </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> img.example.com;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://img.example.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/img.example.com;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> img.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssl config</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 禁止访问 /config 路径，或直接将 config 的映射设置为其他的路径</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* /config</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker Compose</tag>
        <tag>EasyImage</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装 Node.js</title>
    <url>/post/how-to-install-nodejs.html</url>
    <content><![CDATA[<p>本文将带介绍如何在电脑上安装 Node.js 运行环境，从而可以使用丰富的应用 Nodejs 程序。 </p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Windows</button><button type="button" class="tab">macOS</button></div><div class="tab-contents"><div class="tab-item-content active"><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>测试安装环境为 <code>Windows 11</code></p>
<h3 id="下载-Node-js"><a href="#下载-Node-js" class="headerlink" title="下载 Node.js"></a>下载 Node.js</h3><p>访问 Node.js 的官方网站的 <a href="https://nodejs.org/zh-cn/download/prebuilt-installer">下载页面</a> 下载安装包。 </p>
<p>我们选择 <strong>预构建安装程序</strong> ，选择一下自己的系统与 CPU 架构类型， Windows 一般选择 <strong>x64</strong>，再选择 Node.js 版本。</p>
<div class="note info modern"><p>推荐选择版本号为偶数的 LTS 版本</p>
</div>
![nodejs-home-page](https://img.nep.me/i/2024/12/13/7fzq5m-2.webp)

<h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>然后打开安装程序 <code>node-v22.12.0-x64.msi</code>，安装过程没有陷阱，我们 <strong>同意</strong> 协议后，一路点击 Next 即可。  </p>
<p><img src="https://img.nep.me/i/2024/12/13/7hc7pi-2.webp" alt="nodejs-setup"></p>
<p>安装完成后，打开终端程序：</p>
<ul>
<li>右键点击开始菜单，选择终端</li>
<li>或是按 <code>Windows + R</code> 快捷键打开 <strong>运行</strong> 窗口，输入 <code>cmd</code> ，回车打开</li>
<li>或是在资源管理器的地址栏中输入 <code>cmd</code> 回车打开（终端的运行目录将是资源管理器所在的目录）</li>
</ul>
<p>运行下面的命令测试安装结果。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果可以成功输出版本号，表示安装成功。  </p>
<p><img src="https://img.nep.me/i/2024/12/13/7ilvge-2.webp" alt="nodejs-install-done"></p></div><div class="tab-item-content"><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>测试安装环境为 <code>macOS 15.1</code> ，macOS 更推荐使用 **包管理器 <code>Homebrew</code> 进行安装。</p>
<blockquote>
<p>Homebrew 是 macOS 和 Linux 缺失软件包的管理器，用于安装 Apple没有预装但你需要的东西。</p>
</blockquote>
<p>安装需要使用终端，<a href="https://support.apple.com/zh-cn/guide/terminal/apd5265185d-f365-44cb-8b09-71a064a42125/mac">在 Mac 上打开或退出“终端”</a>：</p>
<ul>
<li>启动台 &gt; 其他 &gt; 终端</li>
<li><strong>启动台</strong> 或是　<code>Commond⌘ + 空格</code> 打开聚焦搜索，搜索 <strong>终端</strong> 或是 <strong>Terminal</strong></li>
</ul>
<h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><p>复制安装命令  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以访问 <a href="https://brew.sh/zh-cn/">Homebrew 官网</a> 查看</p>
<p>在终端内执行安装命令，安装时需要输入你的电脑密码进行授权：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">==&gt; Checking <span class="keyword">for</span> `<span class="built_in">sudo</span>` access (<span class="built_in">which</span> may request your password)...</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure>
<p>brew 会提示将安装的软件以及创建的文件夹，按回车继续，等待下载和安装完成。</p>
<p>命令执行结束后按照提示复制执行下面的三条命令添加 PATH ：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &gt;&gt; /Users/me/.zprofile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; /Users/me/.zprofile</span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(/opt/homebrew/bin/brew shellenv)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后可以执行 <code>brew -v</code> 测试安装结果，成功会显示 Hombrew 的版本号。   </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;brew -v</span><br><span class="line">Homebrew 4.4.11</span><br></pre></td></tr></table></figure>
<p>如果使用了 <code>oh-my-zsh</code> ，需要执行下面的命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/opt/homebrew/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc   </span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h3><p>打开终端，执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;node -v</span><br><span class="line">v23.4.0</span><br><span class="line"></span><br><span class="line">&gt;npm -v</span><br><span class="line">10.9.2</span><br></pre></td></tr></table></figure>

<h3 id="brew-常用命令"><a href="#brew-常用命令" class="headerlink" title="brew 常用命令"></a>brew 常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装指定</span></span><br><span class="line">brew install node@22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">brew remove node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装软件</span></span><br><span class="line">brew list </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查更新</span></span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载更新</span></span><br><span class="line">brew upgrade</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h3><div class="note info modern"><p>中国大陆用户可以使用下面的命令切换使用淘宝的镜像源，加速下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div>
<p>查看当前的镜像源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>macOS</tag>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo + GitHub 建立个人博客</title>
    <url>/post/start-blog-with-hexo-and-github.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎来到我的世界！这里是 Mr. O。你是否也有过这样的想法：拥有一个属于自己的博客，记录生活的点滴、分享自己的经验或者展示你的专业技能？</p>
<p>其实，搭建一个个人博客并不像想象的那么复杂。借助 GitHub 提供的免费托管服务，以及功能强大、简单易用的 Hexo 静态博客框架，我么可以轻松打造一个属于自己的博客平台。而且，这个过程完全免费！</p>
<p>在本文中，我将带你一步步了解如何利用 GitHub Pages 和 Hexo 快速部署一个美观、实用的个人博客，让你的思想在网络世界自由驰骋。</p>
<p>让我们开始吧！</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p><a href="(https://hexo.io">Hexo</a> 是一个快速、简洁且高效的博客框架，支持丰富的 <a href="https://hexo.io/themes/">主题</a> ，我们只需要使用 Markdown 语法编写文章，Hexo 将为我们生成网站的文件。     </p>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/">GitHub</a> 是全球最大的代码托管网站和开源社区，我们可以使用 GitHub 免费的 <a href="https://pages.github.com/">Pages</a> 服务托管我们的博客。  </p>
<p>如果你还没有 Github 账户，可以免费注册一个： <a href="https://github.com/signup">https://github.com/signup</a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>拥有了 GitHub 账户之后，我们需要在电脑上安装下面的软件</p>
<ul>
<li>安装 <a href="https://nodejs.org/zh-cn/download/package-manager">Node.js</a> ：查看 <a href="https://ooo.run/post/how-to-install-nodejs.html">如何安装 Node.js</a></li>
<li>安装 <a href="https://git-scm.com/downloads">git</a></li>
<li>一个文本编辑器，推荐安装 <a href="https://code.visualstudio.com/">Visual Studio Code</a></li>
</ul>
<p>安装完成后打开终端程序，可以通过查询版本命令确认是否完成安装。 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; npm -v</span><br><span class="line">10.9.2</span><br><span class="line"></span><br><span class="line">&gt; git -v</span><br><span class="line">git version 2.47.0</span><br></pre></td></tr></table></figure>

<div class="note info modern"><p><strong>如何打开终端</strong>：</p>
<p>使用 <strong>VS Code</strong> ，可以按 Ctrl + ` (Esc 下面的按键) 快捷键在底部打开终端程序。<br>也可以使用菜单 <strong>终端</strong> &gt; <strong>打开终端</strong></p>
</div>

<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>我们需要在终端内使用 <code>npm</code> 命令安装我们的 Hexo 博客：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>执行结束后，再执行 <code>hexo -v</code>  命令，如果成功输出版本信息则表示安装成功：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo -v</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: darwin 24.1.0 15.1.1</span><br><span class="line">node: 23.3.0</span><br><span class="line">acorn: 8.14.0</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>然后创建一个空文件夹用于存放博客文件，创建后使用 VS Code 选择 <code>打开文件夹</code> 打开它，再打开 VS Code 的终端，依次运行下面的命令</p>
<h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>此时可以查看 VS Code 侧边栏，已自动生成了很多文件，一般我们只需要关注 <code>source</code> 中的内容，其中 <code>_posts</code> 是我们存放博客文章的地方。<br><img src="https://img.nep.me/i/2024/12/13/p5boqx-2.webp" alt="VS Code Sidebar">  </p>
<h3 id="预览博客"><a href="#预览博客" class="headerlink" title="预览博客"></a>预览博客</h3><p>使用 <code>hexo s</code> 命令可以在电脑本地预览网站效果。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; hexo s</span><br><span class="line"><span class="comment"># 如果输出下面内容就表示成功了</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>然后我们就可以打开浏览器，访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可查看网站预览。  </p>
<p><img src="https://img.nep.me/i/2024/12/13/bp3m0l-2.webp" alt="Hexo Preview"></p>
<div class="note info modern"><p><code>hexo s</code>  是 <code>hexo server</code> 的简短形式，更加方便</p>
</div> 

<div class="note info modern"><p>Windows 按住 <code>Ctrl</code> , macOS 按住 <code>Commond⌘</code> 点击终端内链接可以快速打开</p>
</div> 

<div class="note warning modern"><p>不需要时后按 <code>Ctrl + C</code> 结束进程</p>
</div> 

<h3 id="设置博客信息"><a href="#设置博客信息" class="headerlink" title="设置博客信息"></a>设置博客信息</h3><p>我们需要编辑根目录下的 <code>_config.yml</code> 文件设置我们自己的站点信息</p>
<figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="comment">## title 是站点的名称</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#x27;O’s World&#x27;</span></span><br><span class="line"><span class="comment">## subtitle 副标题，一般会显示在站点名称的下面</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;Mr. O 的分享小站，分享有趣的事情&#x27;</span></span><br><span class="line"><span class="comment">## description 描述站点的内容</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;探索互联网世界，分享实用教程与精彩内容，发现更多有趣之处。&#x27;</span></span><br><span class="line"><span class="comment">## keywords 是站点的关键词，用于搜索引擎的 SEO 优化，填写几个单词，告诉搜索引擎一些信息。</span></span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="comment">## author 是作者的名称，一般使用自己的昵称</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Mr.</span> <span class="string">O</span></span><br><span class="line"><span class="comment">## 站点的语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment">## timezone 是时区，如果只在电脑上编辑文件，不需要填写， Hexo 会根据本地电脑的时间生成</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## url 是设置站点的域名，可以使用 github 提供的 &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://ooo.run</span></span><br><span class="line"><span class="comment">## permalink 是网站文章的链接格式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">post/:title.html</span></span><br></pre></td></tr></table></figure>
<p><code>permalink</code> 指的是文章的 url 格式，我喜欢使用 <code>post/:title.html</code> 比较简洁，其中 <code>:title</code> 指的是文件名称。 </p>
<p><img src="https://img.nep.me/i/2024/12/13/8t0d4s-2.webp"></p>
<p>默认的是 <code>:year/:month/:day/:title/</code> 会自动添加发布日期信息。  </p>
<p><img src="https://img.nep.me/i/2024/12/13/8t2ul8-2.webp"></p>
<div class="note warning modern"><p>编辑 yml 格式文件时，<code>:</code> 后面需要根一个空格，否则会报错，内容可以使用单引号包裹。</p>
</div> 

<p>编辑后可以重新执行 <code>hexo s</code> 进行预览。 </p>
<h3 id="添加主题-Butterfly"><a href="#添加主题-Butterfly" class="headerlink" title="添加主题(Butterfly)"></a>添加主题(Butterfly)</h3><p>Hexo 支持很多主题，下面将使用并设置的是 <a href="https://butterfly.js.org/">Butterfly</a> 主题。</p>
<p>先安装一下所需的依赖</p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">npm</button><button type="button" class="tab">pnpm</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-util moment-timezone hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm install hexo-util moment-timezone hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<p>打开终端，在博客目录下执行下面的命令下载主题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<p>然后编辑博客目录下 <code>_config.yml</code> 文件，将底部的主题设置 <code>theme: landscape</code> 修改为 <code>butterfly</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>
<p>运行 <code>hexo s</code> 预览主题效果。</p>
<p>为了避免主题未来更新覆盖了我们自定义的配置，可以复制一下主题的配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> themes/butterfly/_config.yml _config.butterfly.yml</span><br></pre></td></tr></table></figure>
<p>然后我们就可以在博客目录下面的 <code>_config.butterfly.yml</code> 对主题进行自定义设置，可以修改一些功能以及设置导航菜单。</p>
<p>有关主题配置文件选项的中文标注可以查看 <a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 文档(三) 主题配置</a></p>
<h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><p>我们可以使用命令 <code>hexo n postname</code> 创建一个新的文章，这个命令等同于</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new post postname</span><br></pre></td></tr></table></figure>
<p>这会在 <code>source/_post</code> 文件夹下面创建一个名称为 <code>postname.md</code> 的文件。  </p>
<p>我们可以使用 VS Code 编辑这个文件，文章使用 Markdown 语法，打开这个文件后我们可以看到已自动填充了一些内容。   </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">postname</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-12-11 22:30:38</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p><code>title</code> 是现实的文章标题名称，<code>date</code> 是发布日期，<code>tags</code> 是文章的标签，这都是可以修改的，我们还可以添加更多的信息，比如分类和主图。 </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">一个文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-12-11 22:30:38</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">标签1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">标签2</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">教程</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">&#x27;https://arina.loli.net/2024/11/23/D3zqLFyGStUWQHZ.png&#x27;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>在 <code>---</code> 下面，我们可以使用 markdown 格式编写我们的文章。</p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>有时我们需要在图片中插入图片，我们只需要将图片放入 Hexo 目录中的 source 文件夹中，非常推荐单独建立一个文件夹比如 <code>images</code> 来存放图片。  </p>
<p>假设我们有两张图片 1.png 与 2.png，此时文件目录是下面的样子 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source/</span><br><span class="line">└── images/</span><br><span class="line">    ├── 1.png</span><br><span class="line">    └── 2.png</span><br></pre></td></tr></table></figure>

<p>我们在文章中引用时，只需要使用下面的 Markdown 语法就可以了，路径以 <code>/</code> 开头，没有 <code>source</code>：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![](<span class="link">/images/1.png</span>)</span><br><span class="line">![<span class="string">2.png</span>](<span class="link">/images/2.png</span>)</span><br></pre></td></tr></table></figure>
<p>虽然 VS Code 无法正常预览图片，但是通过 <code>hexo s</code> 在浏览器内预览就是正常的了。  </p>
<h3 id="添加一些页面（Pages）"><a href="#添加一些页面（Pages）" class="headerlink" title="添加一些页面（Pages）"></a>添加一些页面（Pages）</h3><p>除了文章之外，我们还需要添加一些页面（Pages）：</p>
<h4 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h4><p>在 Hexo 的根目录运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>会生成 <code>source/tags/index.md</code>，编辑这个文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-12-13 07:55:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&#x27;tags&#x27;</span></span><br><span class="line"><span class="attr">orderby:</span> <span class="string">random</span></span><br><span class="line"><span class="attr">order:</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>就可以通过 <a href="http://localhost:4000/tags/">http://localhost:4000/tags/</a> 或是 <code>https://你的域名/tags</code> 进行访问</p>
<h4 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h4><p>在 Hexo 的根目录运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">```  </span><br><span class="line">会生成 `<span class="built_in">source</span>/categories/index.md`，编辑这个文件</span><br><span class="line"></span><br><span class="line">```yml</span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line"><span class="built_in">date</span>: 2024-12-13 07:00:00</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&#x27;categories&#x27;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><p>在 Hexo 的根目录运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">```  </span><br><span class="line">会生成 `<span class="built_in">source</span>/about/index.md`，编辑这个文件</span><br><span class="line"></span><br><span class="line">```yml</span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line"><span class="built_in">date</span>: 2024-12-13 07:00:00</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 Markdown 或是 HTML 格式编写内容 </span></span><br></pre></td></tr></table></figure>

<p>about 不是 Hexo 内置页面类型，不需要添加 <code>types:</code> 但是需要我们自己以 Markdown 或是 HTML 格式编写一些自我介绍。  </p>
<h4 id="将页面添加至导航"><a href="#将页面添加至导航" class="headerlink" title="将页面添加至导航"></a>将页面添加至导航</h4><p>编辑主题的配置文件 <code>_config.butterfly.yml</code>，修改 <code>menu</code> 部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: / || fas fa-home</span><br><span class="line">  分类: /categories/ || fas fa-archive</span><br><span class="line">  标签: /tags/ || fas fa-tag</span><br><span class="line">  关于: /about/ || fas fa-user</span><br><span class="line">  友情链接: /link/ || fas fa-link</span><br></pre></td></tr></table></figure>
<div class="note warning modern"><p>修改主题配置文件， <code>hexo s</code> 命令无法及时刷新预览，需要 Ctrl + C 终止后重新运行</p>
</div>

<p>保存后运行 <code>hexo s</code> 即可在右上角看到菜单。  </p>
<h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><p>我们已经完成了主设置，并创建了新的文章，现在我们将把博客托管到 GitHub Pages 上，从而可以被其他人访问。</p>
<p>访问 <a href="https://github.com/new">https://github.com/new</a> 创建一个新的仓库，如果用于 Github Pages <code>Repository name</code> 必须是 <code>username.github.io</code>，否则不会生效。</p>
<p>然后打开终端，安装 <code>hexo-deployer-git</code> </p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">npm</button><button type="button" class="tab">pnpm</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm install hexo-deployer-git</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<p>然后编辑博客目录下的 <code>_config.yml</code> 文件，设置底部的 deploy 部分。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># 仓库地址</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<p>然后运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>即可将网站推送到 GitHub 上。  </p>
<div class="note warning modern"><p>TODO: GitHub 使用 ssh key 推送</p>
</div>

<p>在 GitHub 网页上，点击顶部 Settings，左侧找到 <strong>Pages</strong> ，编辑 <strong>Branch</strong> 部分，设置为 <code>gh-pages</code> + <code>/(root)</code> 点击 <strong>Save</strong> 保存。</p>
<p><img src="https://img.nep.me/i/2024/12/13/8tl89y-2.webp" alt="gh-page-settings"></p>
<p>然后就可以访问 <code>https://&lt;username&gt;.github.io</code> 查看网站，如果显示 404 可以稍微等几分钟。</p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><div class="note warning modern"><p>TODO: 如何便宜的购买域名</p>
</div>

<p>如果你拥有一个属于自己的域名，那么除了使用 GitHub 提供的免费二级域名之外，我们还可以设置直接使用自己的域名进行访问博客。  </p>
<p>首先第一步前往域名服务商或是 Cloudflare ，在 DNS 设置中添加一条 CNAME 域名记录</p>
<ul>
<li>类型为 <code>CNAME</code></li>
<li>名称主域名填写 <code>@</code> ( 代表 <a href="https://ooo.run/">https://ooo.run</a> )，也可以是 www 或一个其他的子域名</li>
<li>内容是 <code>username.github.io</code><br><img src="https://img.nep.me/i/2024/12/13/akqwpo-2.webp" alt="cloudflare cname"></li>
</ul>
<p>第二步访问 GitHub 网站，在仓库的 <code>Settings</code> &gt; <code>Pages</code> &gt; <code>Custon domain</code> 中，填写我们的域名。</p>
<p><img src="https://img.nep.me/i/2024/12/13/ahmi85-2.webp" alt="github-pages-custom-domain"></p>
<p>第三步在 source 文件下创建一个 <code>CNAME</code> 文件，文件名大写字母，内容是我们需要使用的域名。</p>
<p>最后运行命令将更新推送至 GitHub 就可以了。  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>然后我们就可以通过自己的域名访问博客了。</p>
<h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><div class="note warning modern"><p>TODO: 设置评论</p>
</div>

<h2 id="做好备份"><a href="#做好备份" class="headerlink" title="做好备份"></a>做好备份</h2><div class="note warning modern"><p>TODO: 备份 + Github Action 免去手动 deploy</p>
</div>

<h2 id="常用的-Hexo-命令介绍"><a href="#常用的-Hexo-命令介绍" class="headerlink" title="常用的 Hexo 命令介绍"></a>常用的 Hexo 命令介绍</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成站点</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">hexo deploy </span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存，有时遇到一些错误，可以先执行一下 hexo clean</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="给站点添加搜索功能"><a href="#给站点添加搜索功能" class="headerlink" title="给站点添加搜索功能"></a>给站点添加搜索功能</h3><p>在 Hexo 根目录运行</p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">npm</button><button type="button" class="tab">pnpm</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>

<p>修改站点配置文件 <code>_config.yml</code>，在最后新增</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<p>修改主题配置文件 <code>_config.butterfly.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">local_search</span></span><br></pre></td></tr></table></figure>

<p>然后就可以执行搜索了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g </span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h3 id="设置友情链接"><a href="#设置友情链接" class="headerlink" title="设置友情链接"></a>设置友情链接</h3><p>除了 Hexo 内置的几个页面 Type 之外，Butterly 主题还支持设置友情链接页面：<br>在 Hexo 的根目录运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="built_in">link</span></span><br></pre></td></tr></table></figure>
<p>会生成 <code>source/link/index.md</code>，编辑这个文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-12-13 07:00:05</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&#x27;link&#x27;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>我们还需要在 source 文件夹下创建一个 <code>_data</code> 文件夹，再创建一个 <code>link.yml</code> 文件，按照下面的格式填写链接 </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
